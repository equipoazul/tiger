LetExp{decs=[VarDec{name=N,escape=true,typ=NONE,init=8}
             TypeDec([{name=intArray,ty=ArrayTy(int)}])
             VarDec{name=row,escape=false,typ=NONE,
              init=ArrayExp{test=intArray,size=VarExp(SimpleVar(N)),init=0}}
             VarDec{name=col,escape=true,typ=NONE,
              init=ArrayExp{test=intArray,size=VarExp(SimpleVar(N)),init=0}}
             VarDec{name=diag1,escape=false,typ=NONE,
              init=ArrayExp{test=intArray,
                    size=OpExp{
                         left=OpExp{left=VarExp(SimpleVar(N)),oper=PlusOp,
                               right=VarExp(SimpleVar(N))},oper=MinusOp,
                          right=1},init=0}}
             VarDec{name=diag2,escape=false,typ=NONE,
              init=ArrayExp{test=intArray,
                    size=OpExp{
                         left=OpExp{left=VarExp(SimpleVar(N)),oper=PlusOp,
                               right=VarExp(SimpleVar(N))},oper=MinusOp,
                          right=1},init=0}}
             FunctionDec([{name=printboard,params=[],result=NONE
             body=SeqExp([ForExp{var=i,escape=false,lo=0,
                          hi=OpExp{left=VarExp(SimpleVar(N)),oper=MinusOp,
                              right=1},
                          body=SeqExp([ForExp{var=j,escape=false,lo=0,
                                       hi=OpExp{left=VarExp(SimpleVar(N)),
                                           oper=MinusOp,right=1},
                                       body=CallExp{func=print,
                                            args=[IfExp{
                                                  test=OpExp{
                                                       left=VarExp(
                                                             SubscriptVar(
                                                              SimpleVar(col),
                                                              VarExp(
                                                               SimpleVar(i)))),
                                                        oper=EqOp,
                                                        right=VarExp(
                                                               SimpleVar(j))},
                                                  then'=" O",else'=" ."}]}}
                               CallExp{func=print,args=["\x0a"]}])}
                  CallExp{func=print,args=["\x0a"]}])}])],
 body=SeqExp([CallExp{func=printboard,args=[]}0])}
alloc Var arrrMEM BINOP (PLUS, TEMP ebp,CONST ~4)CONST 0
alloc Var arrrMEM BINOP (PLUS, TEMP ebp,CONST ~4)CONST 0
alloc Var arrrBINOP (MINUS, BINOP (PLUS, MEM BINOP (PLUS, TEMP ebp,CONST ~4),MEM BINOP (PLUS, TEMP ebp,CONST ~4)),CONST 1)CONST 0
alloc Var arrrBINOP (MINUS, BINOP (PLUS, MEM BINOP (PLUS, TEMP ebp,CONST ~4),MEM BINOP (PLUS, TEMP ebp,CONST ~4)),CONST 1)CONST 0
Subscript Var arrrMEM BINOP (PLUS, MEM BINOP (PLUS, TEMP ebp,CONST 8),CONST ~8)TEMP T8
IF EXP!!!
Subscript Var arrrMEM BINOP (PLUS, MEM BINOP (PLUS, TEMP ebp,CONST 8),CONST ~8)TEMP T8
IF EXP!!!
bien!
Fragmentos de string: 10: (_tigermain, ), (printboard_L0, ), (L32, "\x0a"), (L31, "\x0a"), (L27, "\x0a"), (L26, "\x0a"), (L16, " ."), (L15, " O"), (L6, " ."), (L5, " O"), 
L5:	" O"
L6:	" ."
L15:	" O"
L16:	" ."
L26:	"\x0a"
L27:	"\x0a"
L31:	"\x0a"
L32:	"\x0a"
printboard_L0:
SEQ(
 SEQ(
  LABEL L28,
  SEQ(
   MOVE(
    TEMP T8,
    CONST 0),
   SEQ(
    MOVE(
     TEMP T21,
     BINOP(MINUS,
      MEM(
       BINOP(PLUS,
        MEM(
         BINOP(PLUS,
          TEMP ebp,
          CONST 8)),
        CONST ~4)),
      CONST 1)),
    SEQ(
     CJUMP(LE,
      TEMP T21,
      TEMP T8,
      L30,L1),
     SEQ(
      LABEL L30,
      SEQ(
       SEQ(
        SEQ(
         LABEL L23,
         SEQ(
          MOVE(
           TEMP T10,
           CONST 0),
          SEQ(
           MOVE(
            TEMP T20,
            BINOP(MINUS,
             MEM(
              BINOP(PLUS,
               MEM(
                BINOP(PLUS,
                 TEMP ebp,
                 CONST 8)),
               CONST ~4)),
             CONST 1)),
           SEQ(
            CJUMP(LE,
             TEMP T20,
             TEMP T10,
             L25,L2),
            SEQ(
             LABEL L25,
             SEQ(
              SEQ(
               MOVE(
                TEMP T19,
                ESEQ(
                 SEQ(
                  CJUMP(EQ,
                   ESEQ(
                    SEQ(
                     MOVE(
                      TEMP T15,
                      MEM(
                       BINOP(PLUS,
                        MEM(
                         BINOP(PLUS,
                          TEMP ebp,
                          CONST 8)),
                        CONST ~8))),
                     SEQ(
                      MOVE(
                       TEMP T16,
                       TEMP T8),
                      EXP(
                       CALL(
                        NAME _checkIndexArray,
                         TEMP T15,
                         TEMP T16)))),
                    MEM(
                     BINOP(PLUS,
                      TEMP T15,
                      BINOP(MUL,
                       TEMP T16,
                       CONST 4)))),
                   TEMP T10,
                   L20,L21),
                  SEQ(
                   LABEL L20,
                   SEQ(
                    MOVE(
                     TEMP T18,
                     NAME L15),
                    SEQ(
                     JUMP(                      NAME L22),
                     SEQ(
                      LABEL L21,
                      SEQ(
                       MOVE(
                        TEMP T18,
                        NAME L16),
                       LABEL L22)))))),
                 TEMP T18)),
               EXP(
                CALL(
                 NAME print,
                  TEMP T19))),
              SEQ(
               CJUMP(EQ,
                TEMP T10,
                TEMP T20,
                L2,L24),
               SEQ(
                LABEL L24,
                SEQ(
                 MOVE(
                  TEMP T10,
                  BINOP(PLUS,
                   TEMP T10,
                   CONST 1)),
                 SEQ(
                  JUMP(                   NAME L25),
                  LABEL L2)))))))))),
        EXP(
         CALL(
          NAME print,
           NAME L27))),
       SEQ(
        CJUMP(EQ,
         TEMP T8,
         TEMP T21,
         L1,L29),
        SEQ(
         LABEL L29,
         SEQ(
          MOVE(
           TEMP T8,
           BINOP(PLUS,
            TEMP T8,
            CONST 1)),
          SEQ(
           JUMP(            NAME L30),
           LABEL L1)))))))))),
 EXP(
  CALL(
   NAME print,
    NAME L32)))
_tigermain:
MOVE(
 TEMP eax,
 ESEQ(
  SEQ(
   MOVE(
    MEM(
     BINOP(PLUS,
      TEMP ebp,
      CONST ~4)),
    CONST 8),
   SEQ(
    MOVE(
     TEMP T0,
     CALL(
      NAME _allocArray,
       MEM(
        BINOP(PLUS,
         TEMP ebp,
         CONST ~4)),
       CONST 0)),
    SEQ(
     MOVE(
      MEM(
       BINOP(PLUS,
        TEMP ebp,
        CONST ~8)),
      CALL(
       NAME _allocArray,
        MEM(
         BINOP(PLUS,
          TEMP ebp,
          CONST ~4)),
        CONST 0)),
     SEQ(
      MOVE(
       TEMP T3,
       CALL(
        NAME _allocArray,
         BINOP(MINUS,
          BINOP(PLUS,
           MEM(
            BINOP(PLUS,
             TEMP ebp,
             CONST ~4)),
           MEM(
            BINOP(PLUS,
             TEMP ebp,
             CONST ~4))),
          CONST 1),
         CONST 0)),
      MOVE(
       TEMP T6,
       CALL(
        NAME _allocArray,
         BINOP(MINUS,
          BINOP(PLUS,
           MEM(
            BINOP(PLUS,
             TEMP ebp,
             CONST ~4)),
           MEM(
            BINOP(PLUS,
             TEMP ebp,
             CONST ~4))),
          CONST 1),
         CONST 0)))))),
  ESEQ(
   EXP(
    CALL(
     NAME printboard_L0,
      TEMP ebp)),
   CONST 0)))

Tabla de colores:
T51: eax
T53: eax
T54: eax
eax: eax
T55: eax
T57: eax
T59: eax
T61: eax
T63: eax
ebx: ebx
T65: eax
T67: eax
T69: eax
T71: eax
T73: eax
T74: ebx
ecx: ecx
T75: eax
T76: eax
T77: eax
T78: eax
edi: edi
T79: eax
T15: edi
T80: eax
T16: esi
T18: eax
T19: eax
edx: edx
T20: ebx
T21: edi
T24: edi
esi: esi
T25: edi
T26: eax
T27: ebx
T29: eax
T30: esi
T31: edi
T32: eax
T33: edi
T34: edi
T36: eax
T8: esi
Tabla de colores:
T42: eax
T43: eax
T44: eax
T45: ebx
T47: eax
T48: eax
T49: eax
T50: ebx
eax: eax
ebx: ebx
ecx: ecx
edi: edi
edx: edx
T22: eax
T23: ebx
esi: esi
T0: eax
T3: eax
T6: eax
T37: eax
T39: ebx


Codigo despues del coloreo:
.data
L5:
	.long 2
	.string " O"

L6:
	.long 2
	.string " ."

L15:
	.long 2
	.string " O"

L16:
	.long 2
	.string " ."

L26:
	.long 4
	.string "\x0a"

L27:
	.long 4
	.string "\x0a"

L31:
	.long 4
	.string "\x0a"

L32:
	.long 4
	.string "\x0a"

.text
	.globl _tigermain
L28:

	enter $52,$0x0

	pushl %ebx

	pushl %edi

	pushl %esi

	movl $0, %esi 

	movl 8(%ebp), %eax

	movl -4(%eax), %edi

	subl $1,%edi

	cmpl %edi,%esi

	jle L30

L1:

	pushl %ecx

	pushl %edx

	pushl $L32

	call print

	addl $4, %esp

	popl %edx

	popl %ecx

	jmp L33

L30:

L23:

	movl $0, %eax 

	movl %eax, -52(%ebp)

	movl 8(%ebp), %eax

	movl -4(%eax), %eax

	movl %eax, -4(%ebp)

	movl -4(%ebp), %eax

	movl %eax, -12(%ebp)

	movl -12(%ebp), %eax

	movl %eax, -16(%ebp)

	movl -16(%ebp), %eax

	movl %eax, -20(%ebp)

	movl -20(%ebp), %eax

	movl %eax, -24(%ebp)

	movl -24(%ebp), %eax

	movl %eax, -28(%ebp)

	movl -28(%ebp), %eax

	movl %eax, -32(%ebp)

	movl -32(%ebp), %eax

	movl %eax, -36(%ebp)

	movl -36(%ebp), %eax

	movl %eax, -40(%ebp)

	movl -40(%ebp), %eax

	movl %eax, -44(%ebp)

	movl -44(%ebp), %eax

	movl %eax, -48(%ebp)

	movl -48(%ebp), %ebx

	subl $1,%ebx

	movl -52(%ebp), %eax

	cmpl %ebx,%eax

	jle L25

L2:

	pushl %ecx

	pushl %edx

	pushl $L27

	call print

	addl $4, %esp

	popl %edx

	popl %ecx

	cmpl %esi,%edi

	je L1

L29:

	addl $1, %esi

	jmp L30

L25:

	movl 8(%ebp), %eax

	movl -8(%eax), %edi

	pushl %ecx

	pushl %edx

	pushl %esi

	pushl %edi

	call _checkIndexArray

	addl $8, %esp

	popl %edx

	popl %ecx

	movl -8(%ebp), %eax

	imul $4, %esi, %eax

	movl %eax, -8(%ebp)

	movl -8(%ebp), %eax

	addl %eax,%edi

	movl (%edi), %edi

	movl -52(%ebp), %eax

	cmpl %edi,%eax

	je L20

L21:

	movl $L16, %eax

L22:

	pushl %ecx

	pushl %edx

	pushl %eax

	call print

	addl $4, %esp

	popl %edx

	popl %ecx

	movl -52(%ebp), %eax

	cmpl %eax,%ebx

	je L2

L24:

	movl -52(%ebp), %eax

	addl $1, %eax

	movl %eax, -52(%ebp)

	jmp L25

L20:

	movl $L15, %eax

	jmp L22

L33:

	popl %esi

	popl %edi

	popl %ebx

	leave

	ret

_tigermain:

	enter $8,$0x0

	pushl %ebx

	pushl %edi

	pushl %esi

	movl %ebp,%eax

	addl $-4, %eax

	movl $8, (%eax)

	pushl %ecx

	pushl %edx

	pushl $0

	pushl -4(%ebp)

	call _allocArray

	addl $8, %esp

	popl %edx

	popl %ecx

	movl %ebp,%ebx

	addl $-8, %ebx

	pushl %ecx

	pushl %edx

	pushl $0

	pushl -4(%ebp)

	call _allocArray

	addl $8, %esp

	popl %edx

	popl %ecx

	movl %eax, (%ebx)

	pushl %ecx

	pushl %edx

	pushl $0

	movl -4(%ebp), %eax

	movl -4(%ebp), %ebx

	addl %ebx,%eax

	subl $1,%eax

	pushl %eax

	call _allocArray

	addl $8, %esp

	popl %edx

	popl %ecx

	pushl %ecx

	pushl %edx

	pushl $0

	movl -4(%ebp), %eax

	movl -4(%ebp), %ebx

	addl %ebx,%eax

	subl $1,%eax

	pushl %eax

	call _allocArray

	addl $8, %esp

	popl %edx

	popl %ecx

	pushl %ecx

	pushl %edx

	pushl %ebp

	call printboard_L0

	addl $4, %esp

	popl %edx

	popl %ecx

	movl $0, %eax 

	jmp L34

L34:

	popl %esi

	popl %edi

	popl %ebx

	leave

	ret

yes!!

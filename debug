bien!
Fragmentos de string: 33: (_tigermain, ), (printlist_L35, ), (L95, " "), (L94, " "), (L93, "\x0a"), (L92, "\x0a"), (printint_L36, ), (L83, "0"), (L82, "0"), (L79, "-"), (L78, "-"), (f_L63, ), (L73, "0"), (L72, "0"), (L71, "0"), (L70, "0"), (L69, "0"), (L68, "0"), (L67, "0"), (L66, "0"), (merge_L37, ), (readlist_L38, ), (readint_L0, ), (L32, "0"), (L31, "0"), (skipto_L1, ), (L19, "\x0a"), (L18, " "), (isdigit_L2, ), (L8, "9"), (L7, "9"), (L4, "0"), (L3, "0"), 
L3:	"0"
L4:	"0"
L7:	"9"
L8:	"9"
isdigit_L2:
MOVE(
 TEMP eax,
 ESEQ(
  SEQ(
   CJUMP(LE,
    ESEQ(
     SEQ(
      EXP(
       CALL(
        NAME ord,
         NAME L4)),
      MOVE(
       TEMP T4,
       TEMP eax)),
     TEMP T4),
    ESEQ(
     SEQ(
      EXP(
       CALL(
        NAME ord,
         TEMP T3)),
      MOVE(
       TEMP T5,
       TEMP eax)),
     TEMP T5),
    L13,L14),
   SEQ(
    LABEL L13,
    SEQ(
     MOVE(
      TEMP T11,
      ESEQ(
       SEQ(
        MOVE(
         TEMP T12,
         CONST 1),
        SEQ(
         CJUMP(LE,
          ESEQ(
           SEQ(
            EXP(
             CALL(
              NAME ord,
               TEMP T3)),
            MOVE(
             TEMP T7,
             TEMP eax)),
           TEMP T7),
          ESEQ(
           SEQ(
            EXP(
             CALL(
              NAME ord,
               NAME L8)),
            MOVE(
             TEMP T8,
             TEMP eax)),
           TEMP T8),
          L16,L17),
         SEQ(
          LABEL L17,
          SEQ(
           MOVE(
            TEMP T12,
            CONST 0),
           LABEL L16)))),
       TEMP T12)),
     SEQ(
      JUMP(       NAME L15),
      SEQ(
       LABEL L14,
       SEQ(
        MOVE(
         TEMP T11,
         CONST 0),
        LABEL L15)))))),
  TEMP T11))
L18:	" "
L19:	"\x0a"
skipto_L1:
SEQ(
 LABEL L28,
 SEQ(
  CJUMP(NE,
   ESEQ(
    SEQ(
     SEQ(
      MOVE(
       TEMP T13,
       MEM(
        BINOP(PLUS,
         MEM(
          BINOP(PLUS,
           MEM(
            BINOP(PLUS,
             TEMP ebp,
             CONST 8)),
           CONST 8)),
         CONST ~4))),
      SEQ(
       MOVE(
        TEMP T14,
        NAME L18),
       SEQ(
        MOVE(
         TEMP T15,
         CALL(
          NAME _stringcmp,
           TEMP T13,
           TEMP T14)),
        CJUMP(EQ,
         TEMP T15,
         CONST 0,
         L22,L23)))),
     SEQ(
      LABEL L22,
      SEQ(
       MOVE(
        TEMP T20,
        CONST 1),
       SEQ(
        JUMP(         NAME L24),
        SEQ(
         LABEL L23,
         SEQ(
          MOVE(
           TEMP T20,
           ESEQ(
            SEQ(
             MOVE(
              TEMP T21,
              CONST 1),
             SEQ(
              SEQ(
               MOVE(
                TEMP T16,
                MEM(
                 BINOP(PLUS,
                  MEM(
                   BINOP(PLUS,
                    MEM(
                     BINOP(PLUS,
                      TEMP ebp,
                      CONST 8)),
                    CONST 8)),
                  CONST ~4))),
               SEQ(
                MOVE(
                 TEMP T17,
                 NAME L19),
                SEQ(
                 MOVE(
                  TEMP T18,
                  CALL(
                   NAME _stringcmp,
                    TEMP T16,
                    TEMP T17)),
                 CJUMP(EQ,
                  TEMP T18,
                  CONST 0,
                  L25,L26)))),
              SEQ(
               LABEL L26,
               SEQ(
                MOVE(
                 TEMP T21,
                 CONST 0),
                LABEL L25)))),
            TEMP T21)),
          LABEL L24)))))),
    TEMP T20),
   CONST 0,
   L29,L27),
  SEQ(
   LABEL L29,
   SEQ(
    MOVE(
     MEM(
      BINOP(PLUS,
       MEM(
        BINOP(PLUS,
         MEM(
          BINOP(PLUS,
           TEMP ebp,
           CONST 8)),
         CONST 8)),
       CONST ~4)),
     ESEQ(
      SEQ(
       EXP(
        CALL(
         NAME getstr)),
       MOVE(
        TEMP T22,
        TEMP eax)),
      TEMP T22)),
    SEQ(
     JUMP(      NAME L28),
     LABEL L27)))))
L31:	"0"
L32:	"0"
readint_L0:
MOVE(
 TEMP eax,
 ESEQ(
  MOVE(
   TEMP T2,
   CONST 0),
  ESEQ(
   SEQ(
    EXP(
     CALL(
      NAME skipto_L1,
       TEMP ebp)),
    SEQ(
     MOVE(
      ESEQ(
       SEQ(
        MOVE(
         TEMP T25,
         TEMP T1),
        SEQ(
         MOVE(
          TEMP T26,
          CONST 0),
         EXP(
          CALL(
           NAME _checkNil,
            TEMP T25)))),
       MEM(
        BINOP(PLUS,
         TEMP T25,
         BINOP(MUL,
          TEMP T26,
          CONST 4)))),
      ESEQ(
       SEQ(
        MOVE(
         TEMP T23,
         MEM(
          BINOP(PLUS,
           MEM(
            BINOP(PLUS,
             TEMP ebp,
             CONST 8)),
           CONST ~4))),
        SEQ(
         EXP(
          CALL(
           NAME isdigit_L2,
            TEMP ebp,
            TEMP T23)),
         MOVE(
          TEMP T24,
          TEMP eax))),
       TEMP T24)),
     SEQ(
      LABEL L33,
      SEQ(
       CJUMP(NE,
        ESEQ(
         SEQ(
          MOVE(
           TEMP T27,
           MEM(
            BINOP(PLUS,
             MEM(
              BINOP(PLUS,
               TEMP ebp,
               CONST 8)),
             CONST ~4))),
          SEQ(
           EXP(
            CALL(
             NAME isdigit_L2,
              TEMP ebp,
              TEMP T27)),
           MOVE(
            TEMP T28,
            TEMP eax))),
         TEMP T28),
        CONST 0,
        L34,L30),
       SEQ(
        LABEL L34,
        SEQ(
         SEQ(
          MOVE(
           TEMP T2,
           BINOP(MINUS,
            BINOP(PLUS,
             BINOP(MUL,
              TEMP T2,
              CONST 10),
             ESEQ(
              SEQ(
               MOVE(
                TEMP T30,
                MEM(
                 BINOP(PLUS,
                  MEM(
                   BINOP(PLUS,
                    TEMP ebp,
                    CONST 8)),
                  CONST ~4))),
               SEQ(
                EXP(
                 CALL(
                  NAME ord,
                   TEMP T30)),
                MOVE(
                 TEMP T31,
                 TEMP eax))),
              TEMP T31)),
            ESEQ(
             SEQ(
              EXP(
               CALL(
                NAME ord,
                 NAME L32)),
              MOVE(
               TEMP T33,
               TEMP eax)),
             TEMP T33))),
          MOVE(
           MEM(
            BINOP(PLUS,
             MEM(
              BINOP(PLUS,
               TEMP ebp,
               CONST 8)),
             CONST ~4)),
           ESEQ(
            SEQ(
             EXP(
              CALL(
               NAME getstr)),
             MOVE(
              TEMP T35,
              TEMP eax)),
            TEMP T35))),
         SEQ(
          JUMP(           NAME L33),
          LABEL L30))))))),
   TEMP T2)))
readlist_L38:
MOVE(
 TEMP eax,
 ESEQ(
  SEQ(
   MOVE(
    TEMP T36,
    CALL(
     NAME _allocRecord,
      CONST 1,
      CONST 0)),
   MOVE(
    TEMP T38,
    ESEQ(
     SEQ(
      EXP(
       CALL(
        NAME readint_L0,
         MEM(
          BINOP(PLUS,
           TEMP ebp,
           CONST 8)),
         TEMP T36)),
      MOVE(
       TEMP T37,
       TEMP eax)),
     TEMP T37))),
  ESEQ(
   SEQ(
    CJUMP(NE,
     ESEQ(
      SEQ(
       MOVE(
        TEMP T39,
        TEMP T36),
       SEQ(
        MOVE(
         TEMP T40,
         CONST 0),
        EXP(
         CALL(
          NAME _checkNil,
           TEMP T39)))),
      MEM(
       BINOP(PLUS,
        TEMP T39,
        BINOP(MUL,
         TEMP T40,
         CONST 4)))),
     CONST 0,
     L39,L40),
    SEQ(
     LABEL L39,
     SEQ(
      MOVE(
       TEMP T42,
       CALL(
        NAME _allocRecord,
         CONST 2,
         TEMP T38,
         ESEQ(
          SEQ(
           EXP(
            CALL(
             NAME readlist_L38,
              MEM(
               BINOP(PLUS,
                TEMP ebp,
                CONST 8)))),
           MOVE(
            TEMP T41,
            TEMP eax)),
          TEMP T41))),
      SEQ(
       JUMP(        NAME L41),
       SEQ(
        LABEL L40,
        SEQ(
         MOVE(
          TEMP T42,
          CONST 0),
         LABEL L41)))))),
   TEMP T42)))
merge_L37:
MOVE(
 TEMP eax,
 ESEQ(
  SEQ(
   CJUMP(EQ,
    TEMP T43,
    CONST 0,
    L60,L61),
   SEQ(
    LABEL L60,
    SEQ(
     MOVE(
      TEMP T73,
      TEMP T44),
     SEQ(
      JUMP(       NAME L62),
      SEQ(
       LABEL L61,
       SEQ(
        MOVE(
         TEMP T73,
         ESEQ(
          SEQ(
           CJUMP(EQ,
            TEMP T44,
            CONST 0,
            L55,L56),
           SEQ(
            LABEL L55,
            SEQ(
             MOVE(
              TEMP T71,
              TEMP T43),
             SEQ(
              JUMP(               NAME L57),
              SEQ(
               LABEL L56,
               SEQ(
                MOVE(
                 TEMP T71,
                 ESEQ(
                  SEQ(
                   CJUMP(LT,
                    ESEQ(
                     SEQ(
                      MOVE(
                       TEMP T47,
                       TEMP T43),
                      SEQ(
                       MOVE(
                        TEMP T48,
                        CONST 0),
                       EXP(
                        CALL(
                         NAME _checkNil,
                          TEMP T47)))),
                     MEM(
                      BINOP(PLUS,
                       TEMP T47,
                       BINOP(MUL,
                        TEMP T48,
                        CONST 4)))),
                    ESEQ(
                     SEQ(
                      MOVE(
                       TEMP T49,
                       TEMP T44),
                      SEQ(
                       MOVE(
                        TEMP T50,
                        CONST 0),
                       EXP(
                        CALL(
                         NAME _checkNil,
                          TEMP T49)))),
                     MEM(
                      BINOP(PLUS,
                       TEMP T49,
                       BINOP(MUL,
                        TEMP T50,
                        CONST 4)))),
                    L50,L51),
                   SEQ(
                    LABEL L50,
                    SEQ(
                     MOVE(
                      TEMP T69,
                      CALL(
                       NAME _allocRecord,
                        CONST 2,
                        ESEQ(
                         SEQ(
                          MOVE(
                           TEMP T52,
                           TEMP T43),
                          SEQ(
                           MOVE(
                            TEMP T53,
                            CONST 0),
                           EXP(
                            CALL(
                             NAME _checkNil,
                              TEMP T52)))),
                         MEM(
                          BINOP(PLUS,
                           TEMP T52,
                           BINOP(MUL,
                            TEMP T53,
                            CONST 4)))),
                        ESEQ(
                         SEQ(
                          MOVE(
                           TEMP T58,
                           ESEQ(
                            SEQ(
                             MOVE(
                              TEMP T56,
                              TEMP T43),
                             SEQ(
                              MOVE(
                               TEMP T57,
                               CONST 1),
                              EXP(
                               CALL(
                                NAME _checkNil,
                                 TEMP T56)))),
                            MEM(
                             BINOP(PLUS,
                              TEMP T56,
                              BINOP(MUL,
                               TEMP T57,
                               CONST 4))))),
                          SEQ(
                           EXP(
                            CALL(
                             NAME merge_L37,
                              MEM(
                               BINOP(PLUS,
                                TEMP ebp,
                                CONST 8)),
                              TEMP T58,
                              TEMP T44)),
                           MOVE(
                            TEMP T59,
                            TEMP eax))),
                         TEMP T59))),
                     SEQ(
                      JUMP(                       NAME L52),
                      SEQ(
                       LABEL L51,
                       SEQ(
                        MOVE(
                         TEMP T69,
                         CALL(
                          NAME _allocRecord,
                           CONST 2,
                           ESEQ(
                            SEQ(
                             MOVE(
                              TEMP T60,
                              TEMP T44),
                             SEQ(
                              MOVE(
                               TEMP T61,
                               CONST 0),
                              EXP(
                               CALL(
                                NAME _checkNil,
                                 TEMP T60)))),
                            MEM(
                             BINOP(PLUS,
                              TEMP T60,
                              BINOP(MUL,
                               TEMP T61,
                               CONST 4)))),
                           ESEQ(
                            SEQ(
                             MOVE(
                              TEMP T66,
                              ESEQ(
                               SEQ(
                                MOVE(
                                 TEMP T64,
                                 TEMP T44),
                                SEQ(
                                 MOVE(
                                  TEMP T65,
                                  CONST 1),
                                 EXP(
                                  CALL(
                                   NAME _checkNil,
                                    TEMP T64)))),
                               MEM(
                                BINOP(PLUS,
                                 TEMP T64,
                                 BINOP(MUL,
                                  TEMP T65,
                                  CONST 4))))),
                             SEQ(
                              EXP(
                               CALL(
                                NAME merge_L37,
                                 MEM(
                                  BINOP(PLUS,
                                   TEMP ebp,
                                   CONST 8)),
                                 TEMP T43,
                                 TEMP T66)),
                              MOVE(
                               TEMP T67,
                               TEMP eax))),
                            TEMP T67))),
                        LABEL L52)))))),
                  TEMP T69)),
                LABEL L57)))))),
          TEMP T71)),
        LABEL L62)))))),
  TEMP T73))
L66:	"0"
L67:	"0"
L68:	"0"
L69:	"0"
L70:	"0"
L71:	"0"
L72:	"0"
L73:	"0"
f_L63:
SEQ(
 CJUMP(GT,
  TEMP T75,
  CONST 0,
  L74,L75),
 SEQ(
  LABEL L74,
  SEQ(
   SEQ(
    SEQ(
     MOVE(
      TEMP T79,
      BINOP(DIV,
       TEMP T75,
       CONST 10)),
     EXP(
      CALL(
       NAME f_L63,
        MEM(
         BINOP(PLUS,
          TEMP ebp,
          CONST 8)),
        TEMP T79))),
    SEQ(
     MOVE(
      TEMP T104,
      ESEQ(
       SEQ(
        MOVE(
         TEMP T102,
         BINOP(PLUS,
          BINOP(MINUS,
           TEMP T75,
           BINOP(MUL,
            BINOP(DIV,
             TEMP T75,
             CONST 10),
            CONST 10)),
          ESEQ(
           SEQ(
            EXP(
             CALL(
              NAME ord,
               NAME L73)),
            MOVE(
             TEMP T100,
             TEMP eax)),
           TEMP T100))),
        SEQ(
         EXP(
          CALL(
           NAME chr,
            TEMP T102)),
         MOVE(
          TEMP T103,
          TEMP eax))),
       TEMP T103)),
     EXP(
      CALL(
       NAME print,
        TEMP T104)))),
   LABEL L75)))
L78:	"-"
L79:	"-"
L82:	"0"
L83:	"0"
printint_L36:
EXP(
 ESEQ(
  SEQ(
   CJUMP(LT,
    TEMP T74,
    CONST 0,
    L87,L88),
   SEQ(
    LABEL L87,
    SEQ(
     SEQ(
      EXP(
       CALL(
        NAME print,
         NAME L79)),
      SEQ(
       MOVE(
        TEMP T108,
        BINOP(MINUS,
         CONST 0,
         TEMP T74)),
       EXP(
        CALL(
         NAME f_L63,
          TEMP ebp,
          TEMP T108)))),
     SEQ(
      JUMP(       NAME L89),
      SEQ(
       LABEL L88,
       SEQ(
        SEQ(
         CJUMP(GT,
          TEMP T74,
          CONST 0,
          L84,L85),
         SEQ(
          LABEL L84,
          SEQ(
           EXP(
            CALL(
             NAME f_L63,
              TEMP ebp,
              TEMP T74)),
           SEQ(
            JUMP(             NAME L86),
            SEQ(
             LABEL L85,
             SEQ(
              EXP(
               CALL(
                NAME print,
                 NAME L83)),
              LABEL L86)))))),
        LABEL L89)))))),
  CONST 0))
L92:	"\x0a"
L93:	"\x0a"
L94:	" "
L95:	" "
printlist_L35:
SEQ(
 CJUMP(EQ,
  TEMP T110,
  CONST 0,
  L96,L97),
 SEQ(
  LABEL L96,
  SEQ(
   EXP(
    CALL(
     NAME print,
      NAME L93)),
   SEQ(
    JUMP(     NAME L98),
    SEQ(
     LABEL L97,
     SEQ(
      SEQ(
       SEQ(
        MOVE(
         TEMP T116,
         ESEQ(
          SEQ(
           MOVE(
            TEMP T114,
            TEMP T110),
           SEQ(
            MOVE(
             TEMP T115,
             CONST 0),
            EXP(
             CALL(
              NAME _checkNil,
               TEMP T114)))),
          MEM(
           BINOP(PLUS,
            TEMP T114,
            BINOP(MUL,
             TEMP T115,
             CONST 4))))),
        EXP(
         CALL(
          NAME printint_L36,
           MEM(
            BINOP(PLUS,
             TEMP ebp,
             CONST 8)),
           TEMP T116))),
       SEQ(
        EXP(
         CALL(
          NAME print,
           NAME L95)),
        SEQ(
         MOVE(
          TEMP T121,
          ESEQ(
           SEQ(
            MOVE(
             TEMP T119,
             TEMP T110),
            SEQ(
             MOVE(
              TEMP T120,
              CONST 1),
             EXP(
              CALL(
               NAME _checkNil,
                TEMP T119)))),
           MEM(
            BINOP(PLUS,
             TEMP T119,
             BINOP(MUL,
              TEMP T120,
              CONST 4))))),
         EXP(
          CALL(
           NAME printlist_L35,
            MEM(
             BINOP(PLUS,
              TEMP ebp,
              CONST 8)),
            TEMP T121))))),
      LABEL L98))))))
_tigermain:
MOVE(
 TEMP eax,
 ESEQ(
  SEQ(
   MOVE(
    MEM(
     BINOP(PLUS,
      TEMP ebp,
      CONST ~4)),
    ESEQ(
     SEQ(
      EXP(
       CALL(
        NAME getstr)),
      MOVE(
       TEMP T0,
       TEMP eax)),
     TEMP T0)),
   SEQ(
    MOVE(
     TEMP T123,
     ESEQ(
      SEQ(
       EXP(
        CALL(
         NAME readlist_L38,
          TEMP ebp)),
       MOVE(
        TEMP T122,
        TEMP eax)),
      TEMP T122)),
    MOVE(
     TEMP T126,
     ESEQ(
      MOVE(
       MEM(
        BINOP(PLUS,
         TEMP ebp,
         CONST ~4)),
       ESEQ(
        SEQ(
         EXP(
          CALL(
           NAME getstr)),
         MOVE(
          TEMP T124,
          TEMP eax)),
        TEMP T124)),
      ESEQ(
       SEQ(
        EXP(
         CALL(
          NAME readlist_L38,
           TEMP ebp)),
        MOVE(
         TEMP T125,
         TEMP eax)),
       TEMP T125))))),
  ESEQ(
   SEQ(
    MOVE(
     TEMP T129,
     ESEQ(
      SEQ(
       EXP(
        CALL(
         NAME merge_L37,
          TEMP ebp,
          TEMP T123,
          TEMP T126)),
       MOVE(
        TEMP T128,
        TEMP eax)),
      TEMP T128)),
    EXP(
     CALL(
      NAME printlist_L35,
       TEMP ebp,
       TEMP T129))),
   CONST 0)))

--------------- BLOQUE --------------
isdigit_L2:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl L4

	call ord

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T4,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T130,%T4

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T3

	call ord

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T5,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	cmpl %T130,%T5

	jle L13

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L14:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T11,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L15:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %eax,%T11

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L99

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L13:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T12,$1

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T3

	call ord

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T7,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T131,%T7

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl L8

	call ord

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T8,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	cmpl %T131,%T8

	jle L16

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L17:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T12,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L16:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T11,%T12

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L15

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L99:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L28:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T146,(s0+8)

	movl %T145,(s0+8)

	movl %T144,(s0+-4)

	movl %T13,%T144

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T14,L18

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T14

	pushl %T13

	call _stringcmp

	addl %esp,$8

	popl %edx

	popl %ecx

	movl %T15,%T147

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	cmpl %T15,$0

	je L22

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L23:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T21,$1

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T150,(s0+8)

	movl %T149,(s0+8)

	movl %T148,(s0+-4)

	movl %T16,%T148

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T17,L19

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T17

	pushl %T16

	call _stringcmp

	addl %esp,$8

	popl %edx

	popl %ecx

	movl %T18,%T151

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	cmpl %T18,$0

	je L25

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L26:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T21,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L25:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T20,%T21

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L24:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	cmpl %T20,$0

	jne L29

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L27:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L100

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L22:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T20,$1

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L24

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L29:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T154,(s0+8)

	movl %T153,(s0+8)

	movlasdf %T152,%T153

	addl %T152,$-4

	movl %T132,%T152

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	call getstr

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T22,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl (%T132),%T22

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L28

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L100:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
readint_L0:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T2,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %fp

	call skipto_L1

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T25,%T1

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T26,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T25

	call _checkNil

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlE1 %T155,%T25

	imul %T156,%T26*$4

	addl %T155,%T156

	movl %T133,%T155

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T158,(s0+8)

	movl %T157,(s0+-4)

	movl %T23,%T157

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T23

	pushl %fp

	call isdigit_L2

	addl %esp,$8

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T24,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl (%T133),%T24

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L33:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T160,(s0+8)

	movl %T159,(s0+-4)

	movl %T27,%T159

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T27

	pushl %fp

	call isdigit_L2

	addl %esp,$8

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T28,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	cmpl %T28,$0

	jne L34

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L30:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %eax,%T2

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L101

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L34:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	imul %T161,%T2*$10

	movl %T134,%T161

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T163,(s0+8)

	movl %T162,(s0+-4)

	movl %T30,%T162

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T30

	call ord

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T31,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlE1 %T164,%T134

	addl %T164,%T31

	movl %T135,%T164

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl L32

	call ord

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T33,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T165,%T135

	subl %T165,%T33

	movl %T2,%T165

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T167,(s0+8)

	movlasdf %T166,%T167

	addl %T166,$-4

	movl %T136,%T166

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	call getstr

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T35,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl (%T136),%T35

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L33

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L101:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
readlist_L38:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl $0

	pushl $1

	call _allocRecord

	addl %esp,$8

	popl %edx

	popl %ecx

	movl %T36,%T168

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T36

	pushl (%fp+8)

	call readint_L0

	addl %esp,$8

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T37,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T38,%T37

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T39,%T36

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T40,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T39

	call _checkNil

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlE1 %T170,%T39

	imul %T171,%T40*$4

	addl %T170,%T171

	movl %T169,(%T170+0)

	cmpl %T169,$0

	jne L39

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L40:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T42,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L41:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %eax,%T42

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L102

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L39:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T137,%T38

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl (%fp+8)

	call readlist_L38

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T41,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T41

	pushl %T137

	pushl $2

	call _allocRecord

	addl %esp,$12

	popl %edx

	popl %ecx

	movl %T42,%T172

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L41

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L102:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
merge_L37:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	cmpl %T43,$0

	je L60

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L61:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	cmpl %T44,$0

	je L55

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L56:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T47,%T43

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T48,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T47

	call _checkNil

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlE1 %T174,%T47

	imul %T175,%T48*$4

	addl %T174,%T175

	movl %T173,(%T174+0)

	movl %T138,%T173

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T49,%T44

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T50,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T49

	call _checkNil

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlE1 %T177,%T49

	imul %T178,%T50*$4

	addl %T177,%T178

	movl %T176,(%T177+0)

	cmpl %T138,%T176

	jl L50

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L51:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T60,%T44

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T61,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T60

	call _checkNil

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlE1 %T180,%T60

	imul %T181,%T61*$4

	addl %T180,%T181

	movl %T179,(%T180+0)

	movl %T140,%T179

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T64,%T44

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T65,$1

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T64

	call _checkNil

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlE1 %T183,%T64

	imul %T184,%T65*$4

	addl %T183,%T184

	movl %T182,(%T183+0)

	movl %T66,%T182

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T66

	pushl %T43

	pushl (%fp+8)

	call merge_L37

	addl %esp,$12

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T67,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T67

	pushl %T140

	pushl $2

	call _allocRecord

	addl %esp,$12

	popl %edx

	popl %ecx

	movl %T69,%T185

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L52:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T71,%T69

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L57:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T73,%T71

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L62:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %eax,%T73

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L103

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L60:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T73,%T44

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L62

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L55:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T71,%T43

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L57

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L50:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T52,%T43

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T53,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T52

	call _checkNil

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlE1 %T187,%T52

	imul %T188,%T53*$4

	addl %T187,%T188

	movl %T186,(%T187+0)

	movl %T139,%T186

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T56,%T43

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T57,$1

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T56

	call _checkNil

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlE1 %T190,%T56

	imul %T191,%T57*$4

	addl %T190,%T191

	movl %T189,(%T190+0)

	movl %T58,%T189

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T44

	pushl %T58

	pushl (%fp+8)

	call merge_L37

	addl %esp,$12

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T59,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T59

	pushl %T139

	pushl $2

	call _allocRecord

	addl %esp,$12

	popl %edx

	popl %ecx

	movl %T69,%T192

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L52

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L103:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
f_L63:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	cmpl %T75,$0

	jg L74

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L75:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L104

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L74:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %eax,%T75

	CWQ

	movl %T193,$10

	idiv %T193

	movl %T193,%eax

	movl %T79,%T193

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T79

	pushl (%fp+8)

	call f_L63

	addl %esp,$8

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T194,%T75

	movl %eax,%T75

	CWQ

	movl %T196,$10

	idiv %T196

	movl %T196,%eax

	imul %T195,%T196*$10

	subl %T194,%T195

	movl %T141,%T194

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl L73

	call ord

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T100,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlE1 %T197,%T141

	addl %T197,%T100

	movl %T102,%T197

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T102

	call chr

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T103,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T104,%T103

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T104

	call print

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L75

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L104:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
printint_L36:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	cmpl %T74,$0

	jl L87

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L88:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	cmpl %T74,$0

	jg L84

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L85:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl L83

	call print

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L86:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L89:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L105

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L87:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl L79

	call print

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T198, $0

	subl %T198,%T74

	movl %T108,%T198

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T108

	pushl %fp

	call f_L63

	addl %esp,$8

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L89

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L84:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T74

	pushl %fp

	call f_L63

	addl %esp,$8

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L86

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L105:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
printlist_L35:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	cmpl %T110,$0

	je L96

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L97:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T114,%T110

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T115,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T114

	call _checkNil

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlE1 %T200,%T114

	imul %T201,%T115*$4

	addl %T200,%T201

	movl %T199,(%T200+0)

	movl %T116,%T199

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T116

	pushl (%fp+8)

	call printint_L36

	addl %esp,$8

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl L95

	call print

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T119,%T110

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T120,$1

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T119

	call _checkNil

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlE1 %T203,%T119

	imul %T204,%T120*$4

	addl %T203,%T204

	movl %T202,(%T203+0)

	movl %T121,%T202

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T121

	pushl (%fp+8)

	call printlist_L35

	addl %esp,$8

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L98:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L106

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L96:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl L93

	call print

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L98

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L106:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
_tigermain:

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlasdf %T205,%ebp

	addl %T205,$-4

	movl %T142,%T205

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	call getstr

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T0,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl (%T142),%T0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %fp

	call readlist_L38

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T122,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T123,%T122

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movlasdf %T206,%ebp

	addl %T206,$-4

	movl %T143,%T206

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	call getstr

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T124,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl (%T143),%T124

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %fp

	call readlist_L38

	addl %esp,$4

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T125,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T126,%T125

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T126

	pushl %T123

	pushl %fp

	call merge_L37

	addl %esp,$12

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T128,%eax

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %T129,%T128

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	pushl %ecx

	pushl %edx

	pushl %T129

	pushl %fp

	call printlist_L35

	addl %esp,$8

	popl %edx

	popl %ecx

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	movl %eax,$0

---------------END BLOQUE --------------
--------------- BLOQUE --------------
	jmp L107

---------------END BLOQUE --------------
--------------- BLOQUE --------------
L107:

---------------END BLOQUE --------------


-------------------------------------
CODIGO: 
0	LABEL {assem = isdigit_L2:
 lab = isdigit_L2}
1	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
2	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
3	OPER {assem = pushl L4
 dst = , src = , _ jump = _}
4	OPER {assem = call ord
 dst = eax , src = , _ jump = _}
5	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
6	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
7	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
8	MOVE {assem = movl `d0,`s0
, dst =T4, src =eax}
9	MOVE {assem = movl `d0,`s0
, dst =T130, src =T4}
10	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
11	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
12	OPER {assem = pushl `s0
 dst = , src = T3 , _ jump = _}
13	OPER {assem = call ord
 dst = eax , src = , _ jump = _}
14	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
15	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
16	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
17	MOVE {assem = movl `d0,`s0
, dst =T5, src =eax}
18	OPER {assem = cmpl `s0,`s1
 dst = , src = T130 T5 , _ jump = _}
19	OPER {assem = jle L13
 dst = , src = , _ jump = _}
20	LABEL {assem = L14:
 lab = L14}
21	OPER {assem = movl `d0,$0
 dst = T11 , src = , _ jump = _}
22	LABEL {assem = L15:
 lab = L15}
23	MOVE {assem = movl `d0,`s0
, dst =eax, src =T11}
24	OPER {assem = jmp L99
 dst = , src = , _ jump = _}
25	LABEL {assem = L13:
 lab = L13}
26	OPER {assem = movl `d0,$1
 dst = T12 , src = , _ jump = _}
27	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
28	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
29	OPER {assem = pushl `s0
 dst = , src = T3 , _ jump = _}
30	OPER {assem = call ord
 dst = eax , src = , _ jump = _}
31	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
32	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
33	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
34	MOVE {assem = movl `d0,`s0
, dst =T7, src =eax}
35	MOVE {assem = movl `d0,`s0
, dst =T131, src =T7}
36	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
37	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
38	OPER {assem = pushl L8
 dst = , src = , _ jump = _}
39	OPER {assem = call ord
 dst = eax , src = , _ jump = _}
40	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
41	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
42	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
43	MOVE {assem = movl `d0,`s0
, dst =T8, src =eax}
44	OPER {assem = cmpl `s0,`s1
 dst = , src = T131 T8 , _ jump = _}
45	OPER {assem = jle L16
 dst = , src = , _ jump = _}
46	LABEL {assem = L17:
 lab = L17}
47	OPER {assem = movl `d0,$0
 dst = T12 , src = , _ jump = _}
48	LABEL {assem = L16:
 lab = L16}
49	MOVE {assem = movl `d0,`s0
, dst =T11, src =T12}
50	OPER {assem = jmp L15
 dst = , src = , _ jump = _}
51	LABEL {assem = L99:
 lab = L99}

MOVE {assem = movl `d0,`s0
, dst =T4, src =eax}
A workListMoves -> eax T4
MOVE {assem = movl `d0,`s0
, dst =T130, src =T4}
A workListMoves -> T4 T130
MOVE {assem = movl `d0,`s0
, dst =T5, src =eax}
A workListMoves -> eax T5
MOVE {assem = movl `d0,`s0
, dst =eax, src =T11}
A workListMoves -> T11 eax
MOVE {assem = movl `d0,`s0
, dst =T7, src =eax}
A workListMoves -> eax T7
MOVE {assem = movl `d0,`s0
, dst =T131, src =T7}
A workListMoves -> T7 T131
MOVE {assem = movl `d0,`s0
, dst =T8, src =eax}
A workListMoves -> eax T8
MOVE {assem = movl `d0,`s0
, dst =T11, src =T12}
A workListMoves -> T12 T11
JAMON EN coalesce
Coalesce 1 T11 eax
Coalesce 2
Coalesce 3
Coalesce 1 T12 T11
Coalesce 2
Coalesce 3
Coalesce 1 T4 T130
Coalesce 2
Coalesce 3
Coalesce 1 T7 T131
Coalesce 2
Coalesce 3
Coalesce 1 eax T4
Coalesce 2
Coalesce 3
Coalesce 1 eax T5
Coalesce 2
Coalesce 3
Coalesce 1 eax T7
Coalesce 2
Coalesce 3
Coalesce 1 eax T8
Coalesce 2
Coalesce 3
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
CODIGO: 
0	LABEL {assem = isdigit_L2:
 lab = isdigit_L2}
1	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
2	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
3	OPER {assem = pushl L4
 dst = , src = , _ jump = _}
4	OPER {assem = call ord
 dst = T270 , src = , _ jump = _}
5	OPER {assem = movl 16(%ebp), `s0 dst = , src = T270 , _ jump = _}
6	OPER {assem = addl %esp,$4
 dst = T271 ecx edx , src = , _ jump = _}
7	OPER {assem = movl 20(%ebp), `s0 dst = , src = T271 , _ jump = _}
8	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
9	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
10	OPER {assem = movl `d0, 24(%ebp) dst = T272 , src = , _ jump = _}
11	MOVE {assem = movl `d0,`s0
, dst =T4, src =T272}
12	MOVE {assem = movl `d0,`s0
, dst =T273, src =T4}
13	OPER {assem = movl 28(%ebp), `s0 dst = , src = T273 , _ jump = _}
14	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
15	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
16	OPER {assem = movl `d0, 32(%ebp) dst = T274 , src = , _ jump = _}
17	OPER {assem = pushl `s0
 dst = , src = T274 , _ jump = _}
18	OPER {assem = call ord
 dst = T275 , src = , _ jump = _}
19	OPER {assem = movl 36(%ebp), `s0 dst = , src = T275 , _ jump = _}
20	OPER {assem = addl %esp,$4
 dst = T276 ecx edx , src = , _ jump = _}
21	OPER {assem = movl 40(%ebp), `s0 dst = , src = T276 , _ jump = _}
22	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
23	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
24	OPER {assem = movl `d0, 44(%ebp) dst = T277 , src = , _ jump = _}
25	MOVE {assem = movl `d0,`s0
, dst =T5, src =T277}
26	OPER {assem = movl `d0, 48(%ebp) dst = T278 , src = , _ jump = _}
27	OPER {assem = cmpl `s0,`s1
 dst = , src = T278 T5 , _ jump = _}
28	OPER {assem = jle L13
 dst = , src = , _ jump = _}
29	LABEL {assem = L14:
 lab = L14}
30	OPER {assem = movl `d0,$0
 dst = T11 , src = , _ jump = _}
31	LABEL {assem = L15:
 lab = L15}
32	MOVE {assem = movl `d0,`s0
, dst =T279, src =T11}
33	OPER {assem = movl 52(%ebp), `s0 dst = , src = T279 , _ jump = _}
34	OPER {assem = jmp L99
 dst = , src = , _ jump = _}
35	LABEL {assem = L13:
 lab = L13}
36	OPER {assem = movl `d0,$1
 dst = T12 , src = , _ jump = _}
37	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
38	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
39	OPER {assem = movl `d0, 56(%ebp) dst = T280 , src = , _ jump = _}
40	OPER {assem = pushl `s0
 dst = , src = T280 , _ jump = _}
41	OPER {assem = call ord
 dst = T281 , src = , _ jump = _}
42	OPER {assem = movl 60(%ebp), `s0 dst = , src = T281 , _ jump = _}
43	OPER {assem = addl %esp,$4
 dst = T282 ecx edx , src = , _ jump = _}
44	OPER {assem = movl 64(%ebp), `s0 dst = , src = T282 , _ jump = _}
45	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
46	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
47	OPER {assem = movl `d0, 68(%ebp) dst = T283 , src = , _ jump = _}
48	MOVE {assem = movl `d0,`s0
, dst =T7, src =T283}
49	MOVE {assem = movl `d0,`s0
, dst =T284, src =T7}
50	OPER {assem = movl 72(%ebp), `s0 dst = , src = T284 , _ jump = _}
51	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
52	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
53	OPER {assem = pushl L8
 dst = , src = , _ jump = _}
54	OPER {assem = call ord
 dst = T285 , src = , _ jump = _}
55	OPER {assem = movl 76(%ebp), `s0 dst = , src = T285 , _ jump = _}
56	OPER {assem = addl %esp,$4
 dst = T286 ecx edx , src = , _ jump = _}
57	OPER {assem = movl 80(%ebp), `s0 dst = , src = T286 , _ jump = _}
58	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
59	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
60	OPER {assem = movl `d0, 84(%ebp) dst = T287 , src = , _ jump = _}
61	MOVE {assem = movl `d0,`s0
, dst =T8, src =T287}
62	OPER {assem = movl `d0, 88(%ebp) dst = T288 , src = , _ jump = _}
63	OPER {assem = cmpl `s0,`s1
 dst = , src = T288 T8 , _ jump = _}
64	OPER {assem = jle L16
 dst = , src = , _ jump = _}
65	LABEL {assem = L17:
 lab = L17}
66	OPER {assem = movl `d0,$0
 dst = T12 , src = , _ jump = _}
67	LABEL {assem = L16:
 lab = L16}
68	MOVE {assem = movl `d0,`s0
, dst =T11, src =T12}
69	OPER {assem = jmp L15
 dst = , src = , _ jump = _}
70	LABEL {assem = L99:
 lab = L99}

MOVE {assem = movl `d0,`s0
, dst =T4, src =T272}
A workListMoves -> T272 T4
MOVE {assem = movl `d0,`s0
, dst =T273, src =T4}
A workListMoves -> T4 T273
MOVE {assem = movl `d0,`s0
, dst =T5, src =T277}
A workListMoves -> T277 T5
MOVE {assem = movl `d0,`s0
, dst =T279, src =T11}
A workListMoves -> T11 T279
MOVE {assem = movl `d0,`s0
, dst =T7, src =T283}
A workListMoves -> T283 T7
MOVE {assem = movl `d0,`s0
, dst =T284, src =T7}
A workListMoves -> T7 T284
MOVE {assem = movl `d0,`s0
, dst =T8, src =T287}
A workListMoves -> T287 T8
MOVE {assem = movl `d0,`s0
, dst =T11, src =T12}
A workListMoves -> T12 T11
JAMON EN coalesce
Coalesce 1 T11 T279
Coalesce 2
Coalesce 3
Coalesce 1 T12 T11
Coalesce 2
Coalesce 3
Coalesce 1 T272 T4
Coalesce 2
Coalesce 3
Coalesce 1 T277 T5
Coalesce 2
Coalesce 3
Coalesce 1 T283 T7
Coalesce 2
Coalesce 3
Coalesce 1 T287 T8
Coalesce 2
Coalesce 3
Coalesce 1 T4 T273
Coalesce 2
Coalesce 3
Coalesce 1 T7 T284
Coalesce 2
Coalesce 3
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
~~~~~~~~~~> T11 ebx
~~~~~~~~~~> T12 eax
~~~~~~~~~~> T4 esi
~~~~~~~~~~> T5 edi
~~~~~~~~~~> T7 edx
~~~~~~~~~~> T8 ecx
CODIGO: 
0	LABEL {assem = L28:
 lab = L28}
1	OPER {assem = movl `d0,(s0+8)
 dst = T209 , src = ebp , _ jump = _}
2	OPER {assem = movl `d0,(s0+8)
 dst = T208 , src = T209 , _ jump = _}
3	OPER {assem = movl `d0,(s0+-4)
 dst = T207 , src = T208 , _ jump = _}
4	MOVE {assem = movl `d0,`s0
, dst =T13, src =T207}
5	OPER {assem = movl `d0,L18
 dst = T14 , src = , _ jump = _}
6	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
7	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
8	OPER {assem = pushl `s0
 dst = , src = T14 , _ jump = _}
9	OPER {assem = pushl `s0
 dst = , src = T13 , _ jump = _}
10	OPER {assem = call _stringcmp
 dst = eax , src = , _ jump = _}
11	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
12	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
13	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
14	MOVE {assem = movl `d0,`s0
, dst =T15, src =T210}
15	OPER {assem = cmpl `s0,$0
 dst = , src = T15 , _ jump = _}
16	OPER {assem = je L22
 dst = , src = , _ jump = _}
17	LABEL {assem = L23:
 lab = L23}
18	OPER {assem = movl `d0,$1
 dst = T21 , src = , _ jump = _}
19	OPER {assem = movl `d0,(s0+8)
 dst = T213 , src = ebp , _ jump = _}
20	OPER {assem = movl `d0,(s0+8)
 dst = T212 , src = T213 , _ jump = _}
21	OPER {assem = movl `d0,(s0+-4)
 dst = T211 , src = T212 , _ jump = _}
22	MOVE {assem = movl `d0,`s0
, dst =T16, src =T211}
23	OPER {assem = movl `d0,L19
 dst = T17 , src = , _ jump = _}
24	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
25	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
26	OPER {assem = pushl `s0
 dst = , src = T17 , _ jump = _}
27	OPER {assem = pushl `s0
 dst = , src = T16 , _ jump = _}
28	OPER {assem = call _stringcmp
 dst = eax , src = , _ jump = _}
29	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
30	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
31	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
32	MOVE {assem = movl `d0,`s0
, dst =T18, src =T214}
33	OPER {assem = cmpl `s0,$0
 dst = , src = T18 , _ jump = _}
34	OPER {assem = je L25
 dst = , src = , _ jump = _}
35	LABEL {assem = L26:
 lab = L26}
36	OPER {assem = movl `d0,$0
 dst = T21 , src = , _ jump = _}
37	LABEL {assem = L25:
 lab = L25}
38	MOVE {assem = movl `d0,`s0
, dst =T20, src =T21}
39	LABEL {assem = L24:
 lab = L24}
40	OPER {assem = cmpl `s0,$0
 dst = , src = T20 , _ jump = _}
41	OPER {assem = jne L29
 dst = , src = , _ jump = _}
42	LABEL {assem = L27:
 lab = L27}
43	OPER {assem = jmp L100
 dst = , src = , _ jump = _}
44	LABEL {assem = L22:
 lab = L22}
45	OPER {assem = movl `d0,$1
 dst = T20 , src = , _ jump = _}
46	OPER {assem = jmp L24
 dst = , src = , _ jump = _}
47	LABEL {assem = L29:
 lab = L29}
48	OPER {assem = movl `d0,(s0+8)
 dst = T217 , src = ebp , _ jump = _}
49	OPER {assem = movl `d0,(s0+8)
 dst = T216 , src = T217 , _ jump = _}
50	MOVE {assem = movlasdf `d0,`s0
, dst =T215, src =T216}
51	OPER {assem = addl `d0,$-4
 dst = T215 , src = , _ jump = _}
52	MOVE {assem = movl `d0,`s0
, dst =T132, src =T215}
53	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
54	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
55	OPER {assem = call getstr
 dst = eax , src = , _ jump = _}
56	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
57	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
58	MOVE {assem = movl `d0,`s0
, dst =T22, src =eax}
59	OPER {assem = movl (`s0),`s1
 dst = , src = T132 T22 , _ jump = _}
60	OPER {assem = jmp L28
 dst = , src = , _ jump = _}
61	LABEL {assem = L100:
 lab = L100}

MOVE {assem = movl `d0,`s0
, dst =T13, src =T207}
A workListMoves -> T207 T13
MOVE {assem = movl `d0,`s0
, dst =T15, src =T210}
A workListMoves -> T210 T15
MOVE {assem = movl `d0,`s0
, dst =T16, src =T211}
A workListMoves -> T211 T16
MOVE {assem = movl `d0,`s0
, dst =T18, src =T214}
A workListMoves -> T214 T18
MOVE {assem = movl `d0,`s0
, dst =T20, src =T21}
A workListMoves -> T21 T20
MOVE {assem = movlasdf `d0,`s0
, dst =T215, src =T216}
A workListMoves -> T216 T215
MOVE {assem = movl `d0,`s0
, dst =T132, src =T215}
A workListMoves -> T215 T132
MOVE {assem = movl `d0,`s0
, dst =T22, src =eax}
A workListMoves -> eax T22
JAMON EN coalesce
Coalesce 1 T207 T13
Coalesce 2
Coalesce 3
Coalesce 1 T21 T20
Coalesce 2
Coalesce 3
Coalesce 1 T210 T15
Coalesce 2
Coalesce 3
Coalesce 1 T211 T16
Coalesce 2
Coalesce 3
Coalesce 1 T214 T18
Coalesce 2
Coalesce 3
Coalesce 1 T215 T132
Coalesce 2
Coalesce 3
Coalesce 1 T216 T215
Coalesce 2
Coalesce 3
Coalesce 1 eax T22
Coalesce 2
Coalesce 3
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN coalesce
Coalesce 1 T210 T15
Coalesce 2
Coalesce 3
JAMON EN freeze
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
CODIGO: 
0	LABEL {assem = L28:
 lab = L28}
1	OPER {assem = movl `d0,(s0+8)
 dst = T289 , src = ebp , _ jump = _}
2	OPER {assem = movl 16(%ebp), `s0 dst = , src = T289 , _ jump = _}
3	OPER {assem = movl `d0, 20(%ebp) dst = T291 , src = , _ jump = _}
4	OPER {assem = movl `d0,(s0+8)
 dst = T290 , src = T291 , _ jump = _}
5	OPER {assem = movl 20(%ebp), `s0 dst = , src = T290 , _ jump = _}
6	OPER {assem = movl `d0, 24(%ebp) dst = T293 , src = , _ jump = _}
7	OPER {assem = movl `d0,(s0+-4)
 dst = T292 , src = T293 , _ jump = _}
8	OPER {assem = movl 24(%ebp), `s0 dst = , src = T292 , _ jump = _}
9	OPER {assem = movl `d0, 28(%ebp) dst = T295 , src = , _ jump = _}
10	MOVE {assem = movl `d0,`s0
, dst =T294, src =T295}
11	OPER {assem = movl 28(%ebp), `s0 dst = , src = T294 , _ jump = _}
12	OPER {assem = movl `d0,L18
 dst = T296 , src = , _ jump = _}
13	OPER {assem = movl 32(%ebp), `s0 dst = , src = T296 , _ jump = _}
14	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
15	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
16	OPER {assem = movl `d0, 36(%ebp) dst = T297 , src = , _ jump = _}
17	OPER {assem = pushl `s0
 dst = , src = T297 , _ jump = _}
18	OPER {assem = movl `d0, 40(%ebp) dst = T298 , src = , _ jump = _}
19	OPER {assem = pushl `s0
 dst = , src = T298 , _ jump = _}
20	OPER {assem = call _stringcmp
 dst = T299 , src = , _ jump = _}
21	OPER {assem = movl 44(%ebp), `s0 dst = , src = T299 , _ jump = _}
22	OPER {assem = addl %esp,$8
 dst = T300 ecx edx , src = , _ jump = _}
23	OPER {assem = movl 48(%ebp), `s0 dst = , src = T300 , _ jump = _}
24	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
25	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
26	OPER {assem = movl `d0, 52(%ebp) dst = T302 , src = , _ jump = _}
27	MOVE {assem = movl `d0,`s0
, dst =T301, src =T302}
28	OPER {assem = movl 52(%ebp), `s0 dst = , src = T301 , _ jump = _}
29	OPER {assem = movl `d0, 56(%ebp) dst = T303 , src = , _ jump = _}
30	OPER {assem = cmpl `s0,$0
 dst = , src = T303 , _ jump = _}
31	OPER {assem = je L22
 dst = , src = , _ jump = _}
32	LABEL {assem = L23:
 lab = L23}
33	OPER {assem = movl `d0,$1
 dst = T21 , src = , _ jump = _}
34	OPER {assem = movl `d0,(s0+8)
 dst = T304 , src = ebp , _ jump = _}
35	OPER {assem = movl 60(%ebp), `s0 dst = , src = T304 , _ jump = _}
36	OPER {assem = movl `d0, 64(%ebp) dst = T306 , src = , _ jump = _}
37	OPER {assem = movl `d0,(s0+8)
 dst = T305 , src = T306 , _ jump = _}
38	OPER {assem = movl 64(%ebp), `s0 dst = , src = T305 , _ jump = _}
39	OPER {assem = movl `d0, 68(%ebp) dst = T308 , src = , _ jump = _}
40	OPER {assem = movl `d0,(s0+-4)
 dst = T307 , src = T308 , _ jump = _}
41	OPER {assem = movl 68(%ebp), `s0 dst = , src = T307 , _ jump = _}
42	OPER {assem = movl `d0, 72(%ebp) dst = T310 , src = , _ jump = _}
43	MOVE {assem = movl `d0,`s0
, dst =T309, src =T310}
44	OPER {assem = movl 72(%ebp), `s0 dst = , src = T309 , _ jump = _}
45	OPER {assem = movl `d0,L19
 dst = T311 , src = , _ jump = _}
46	OPER {assem = movl 76(%ebp), `s0 dst = , src = T311 , _ jump = _}
47	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
48	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
49	OPER {assem = movl `d0, 80(%ebp) dst = T312 , src = , _ jump = _}
50	OPER {assem = pushl `s0
 dst = , src = T312 , _ jump = _}
51	OPER {assem = movl `d0, 84(%ebp) dst = T313 , src = , _ jump = _}
52	OPER {assem = pushl `s0
 dst = , src = T313 , _ jump = _}
53	OPER {assem = call _stringcmp
 dst = T314 , src = , _ jump = _}
54	OPER {assem = movl 88(%ebp), `s0 dst = , src = T314 , _ jump = _}
55	OPER {assem = addl %esp,$8
 dst = T315 ecx edx , src = , _ jump = _}
56	OPER {assem = movl 92(%ebp), `s0 dst = , src = T315 , _ jump = _}
57	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
58	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
59	OPER {assem = movl `d0, 96(%ebp) dst = T317 , src = , _ jump = _}
60	MOVE {assem = movl `d0,`s0
, dst =T316, src =T317}
61	OPER {assem = movl 96(%ebp), `s0 dst = , src = T316 , _ jump = _}
62	OPER {assem = movl `d0, 100(%ebp) dst = T318 , src = , _ jump = _}
63	OPER {assem = cmpl `s0,$0
 dst = , src = T318 , _ jump = _}
64	OPER {assem = je L25
 dst = , src = , _ jump = _}
65	LABEL {assem = L26:
 lab = L26}
66	OPER {assem = movl `d0,$0
 dst = T21 , src = , _ jump = _}
67	LABEL {assem = L25:
 lab = L25}
68	MOVE {assem = movl `d0,`s0
, dst =T20, src =T21}
69	LABEL {assem = L24:
 lab = L24}
70	OPER {assem = cmpl `s0,$0
 dst = , src = T20 , _ jump = _}
71	OPER {assem = jne L29
 dst = , src = , _ jump = _}
72	LABEL {assem = L27:
 lab = L27}
73	OPER {assem = jmp L100
 dst = , src = , _ jump = _}
74	LABEL {assem = L22:
 lab = L22}
75	OPER {assem = movl `d0,$1
 dst = T20 , src = , _ jump = _}
76	OPER {assem = jmp L24
 dst = , src = , _ jump = _}
77	LABEL {assem = L29:
 lab = L29}
78	OPER {assem = movl `d0,(s0+8)
 dst = T217 , src = ebp , _ jump = _}
79	OPER {assem = movl `d0,(s0+8)
 dst = T216 , src = T217 , _ jump = _}
80	MOVE {assem = movlasdf `d0,`s0
, dst =T215, src =T216}
81	OPER {assem = addl `d0,$-4
 dst = T215 , src = , _ jump = _}
82	MOVE {assem = movl `d0,`s0
, dst =T319, src =T215}
83	OPER {assem = movl 104(%ebp), `s0 dst = , src = T319 , _ jump = _}
84	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
85	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
86	OPER {assem = call getstr
 dst = T320 , src = , _ jump = _}
87	OPER {assem = movl 108(%ebp), `s0 dst = , src = T320 , _ jump = _}
88	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
89	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
90	OPER {assem = movl `d0, 112(%ebp) dst = T321 , src = , _ jump = _}
91	MOVE {assem = movl `d0,`s0
, dst =T22, src =T321}
92	OPER {assem = movl `d0, 116(%ebp) dst = T322 , src = , _ jump = _}
93	OPER {assem = movl (`s0),`s1
 dst = , src = T322 T22 , _ jump = _}
94	OPER {assem = jmp L28
 dst = , src = , _ jump = _}
95	LABEL {assem = L100:
 lab = L100}

MOVE {assem = movl `d0,`s0
, dst =T294, src =T295}
A workListMoves -> T295 T294
MOVE {assem = movl `d0,`s0
, dst =T301, src =T302}
A workListMoves -> T302 T301
MOVE {assem = movl `d0,`s0
, dst =T309, src =T310}
A workListMoves -> T310 T309
MOVE {assem = movl `d0,`s0
, dst =T316, src =T317}
A workListMoves -> T317 T316
MOVE {assem = movl `d0,`s0
, dst =T20, src =T21}
A workListMoves -> T21 T20
MOVE {assem = movlasdf `d0,`s0
, dst =T215, src =T216}
A workListMoves -> T216 T215
MOVE {assem = movl `d0,`s0
, dst =T319, src =T215}
A workListMoves -> T215 T319
MOVE {assem = movl `d0,`s0
, dst =T22, src =T321}
A workListMoves -> T321 T22
JAMON EN coalesce
Coalesce 1 T21 T20
Coalesce 2
Coalesce 3
Coalesce 1 T215 T319
Coalesce 2
Coalesce 3
Coalesce 1 T216 T215
Coalesce 2
Coalesce 3
Coalesce 1 T295 T294
Coalesce 2
Coalesce 3
Coalesce 1 T302 T301
Coalesce 2
Coalesce 3
Coalesce 1 T310 T309
Coalesce 2
Coalesce 3
Coalesce 1 T317 T316
Coalesce 2
Coalesce 3
Coalesce 1 T321 T22
Coalesce 2
Coalesce 3
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
~~~~~~~~~~> T20 ecx
~~~~~~~~~~> T21 ebx
~~~~~~~~~~> T215 eax
~~~~~~~~~~> T216 esi
~~~~~~~~~~> T217 edi
~~~~~~~~~~> T22 edx
CODIGO: 
0	LABEL {assem = readint_L0:
 lab = readint_L0}
1	OPER {assem = movl `d0,$0
 dst = T2 , src = , _ jump = _}
2	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
3	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
4	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
5	OPER {assem = call skipto_L1
 dst = eax , src = , _ jump = _}
6	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
7	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
8	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
9	MOVE {assem = movl `d0,`s0
, dst =T25, src =T1}
10	OPER {assem = movl `d0,$0
 dst = T26 , src = , _ jump = _}
11	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
12	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
13	OPER {assem = pushl `s0
 dst = , src = T25 , _ jump = _}
14	OPER {assem = call _checkNil
 dst = eax , src = , _ jump = _}
15	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
16	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
17	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
18	MOVE {assem = movlE1 `d0,`s0
, dst =T218, src =T25}
19	OPER {assem = imul `d0,`s0*$4
 dst = T219 , src = T26 , _ jump = _}
20	OPER {assem = addl `d0,`s0
 dst = T218 , src = T219 , _ jump = _}
21	MOVE {assem = movl `d0,`s0
, dst =T133, src =T218}
22	OPER {assem = movl `d0,(s0+8)
 dst = T221 , src = ebp , _ jump = _}
23	OPER {assem = movl `d0,(s0+-4)
 dst = T220 , src = T221 , _ jump = _}
24	MOVE {assem = movl `d0,`s0
, dst =T23, src =T220}
25	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
26	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
27	OPER {assem = pushl `s0
 dst = , src = T23 , _ jump = _}
28	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
29	OPER {assem = call isdigit_L2
 dst = eax , src = , _ jump = _}
30	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
31	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
32	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
33	MOVE {assem = movl `d0,`s0
, dst =T24, src =eax}
34	OPER {assem = movl (`s0),`s1
 dst = , src = T133 T24 , _ jump = _}
35	LABEL {assem = L33:
 lab = L33}
36	OPER {assem = movl `d0,(s0+8)
 dst = T223 , src = ebp , _ jump = _}
37	OPER {assem = movl `d0,(s0+-4)
 dst = T222 , src = T223 , _ jump = _}
38	MOVE {assem = movl `d0,`s0
, dst =T27, src =T222}
39	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
40	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
41	OPER {assem = pushl `s0
 dst = , src = T27 , _ jump = _}
42	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
43	OPER {assem = call isdigit_L2
 dst = eax , src = , _ jump = _}
44	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
45	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
46	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
47	MOVE {assem = movl `d0,`s0
, dst =T28, src =eax}
48	OPER {assem = cmpl `s0,$0
 dst = , src = T28 , _ jump = _}
49	OPER {assem = jne L34
 dst = , src = , _ jump = _}
50	LABEL {assem = L30:
 lab = L30}
51	MOVE {assem = movl `d0,`s0
, dst =eax, src =T2}
52	OPER {assem = jmp L101
 dst = , src = , _ jump = _}
53	LABEL {assem = L34:
 lab = L34}
54	OPER {assem = imul `d0,`s0*$10
 dst = T224 , src = T2 , _ jump = _}
55	MOVE {assem = movl `d0,`s0
, dst =T134, src =T224}
56	OPER {assem = movl `d0,(s0+8)
 dst = T226 , src = ebp , _ jump = _}
57	OPER {assem = movl `d0,(s0+-4)
 dst = T225 , src = T226 , _ jump = _}
58	MOVE {assem = movl `d0,`s0
, dst =T30, src =T225}
59	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
60	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
61	OPER {assem = pushl `s0
 dst = , src = T30 , _ jump = _}
62	OPER {assem = call ord
 dst = eax , src = , _ jump = _}
63	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
64	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
65	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
66	MOVE {assem = movl `d0,`s0
, dst =T31, src =eax}
67	MOVE {assem = movlE1 `d0,`s0
, dst =T227, src =T134}
68	OPER {assem = addl `d0,`s0
 dst = T227 , src = T31 , _ jump = _}
69	MOVE {assem = movl `d0,`s0
, dst =T135, src =T227}
70	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
71	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
72	OPER {assem = pushl L32
 dst = , src = , _ jump = _}
73	OPER {assem = call ord
 dst = eax , src = , _ jump = _}
74	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
75	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
76	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
77	MOVE {assem = movl `d0,`s0
, dst =T33, src =eax}
78	MOVE {assem = movl `d0,`s0
, dst =T228, src =T135}
79	OPER {assem = subl `d0,`s0
 dst = T228 , src = T33 , _ jump = _}
80	MOVE {assem = movl `d0,`s0
, dst =T2, src =T228}
81	OPER {assem = movl `d0,(s0+8)
 dst = T230 , src = ebp , _ jump = _}
82	MOVE {assem = movlasdf `d0,`s0
, dst =T229, src =T230}
83	OPER {assem = addl `d0,$-4
 dst = T229 , src = , _ jump = _}
84	MOVE {assem = movl `d0,`s0
, dst =T136, src =T229}
85	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
86	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
87	OPER {assem = call getstr
 dst = eax , src = , _ jump = _}
88	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
89	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
90	MOVE {assem = movl `d0,`s0
, dst =T35, src =eax}
91	OPER {assem = movl (`s0),`s1
 dst = , src = T136 T35 , _ jump = _}
92	OPER {assem = jmp L33
 dst = , src = , _ jump = _}
93	LABEL {assem = L101:
 lab = L101}

MOVE {assem = movl `d0,`s0
, dst =T25, src =T1}
A workListMoves -> T1 T25
MOVE {assem = movlE1 `d0,`s0
, dst =T218, src =T25}
A workListMoves -> T25 T218
MOVE {assem = movl `d0,`s0
, dst =T133, src =T218}
A workListMoves -> T218 T133
MOVE {assem = movl `d0,`s0
, dst =T23, src =T220}
A workListMoves -> T220 T23
MOVE {assem = movl `d0,`s0
, dst =T24, src =eax}
A workListMoves -> eax T24
MOVE {assem = movl `d0,`s0
, dst =T27, src =T222}
A workListMoves -> T222 T27
MOVE {assem = movl `d0,`s0
, dst =T28, src =eax}
A workListMoves -> eax T28
MOVE {assem = movl `d0,`s0
, dst =eax, src =T2}
A workListMoves -> T2 eax
MOVE {assem = movl `d0,`s0
, dst =T134, src =T224}
A workListMoves -> T224 T134
MOVE {assem = movl `d0,`s0
, dst =T30, src =T225}
A workListMoves -> T225 T30
MOVE {assem = movl `d0,`s0
, dst =T31, src =eax}
A workListMoves -> eax T31
MOVE {assem = movlE1 `d0,`s0
, dst =T227, src =T134}
A workListMoves -> T134 T227
MOVE {assem = movl `d0,`s0
, dst =T135, src =T227}
A workListMoves -> T227 T135
MOVE {assem = movl `d0,`s0
, dst =T33, src =eax}
A workListMoves -> eax T33
MOVE {assem = movl `d0,`s0
, dst =T228, src =T135}
A workListMoves -> T135 T228
MOVE {assem = movl `d0,`s0
, dst =T2, src =T228}
A workListMoves -> T228 T2
MOVE {assem = movlasdf `d0,`s0
, dst =T229, src =T230}
A workListMoves -> T230 T229
MOVE {assem = movl `d0,`s0
, dst =T136, src =T229}
A workListMoves -> T229 T136
MOVE {assem = movl `d0,`s0
, dst =T35, src =eax}
A workListMoves -> eax T35
JAMON EN coalesce
Coalesce 1 T1 T25
Coalesce 2
Coalesce 3
Coalesce 1 T134 T227
Coalesce 2
Coalesce 3
Coalesce 1 T135 T228
Coalesce 2
Coalesce 3
Coalesce 1 T2 eax
Coalesce 2
Coalesce 3
Coalesce 1 T218 T133
Coalesce 2
Coalesce 3
Coalesce 1 T220 T23
Coalesce 2
Coalesce 3
Coalesce 1 T222 T27
Coalesce 2
Coalesce 3
Coalesce 1 T224 T134
Coalesce 2
Coalesce 3
Coalesce 1 T225 T30
Coalesce 2
Coalesce 3
Coalesce 1 T227 T135
Coalesce 2
Coalesce 3
Coalesce 1 T228 T2
Coalesce 2
Coalesce 3
Coalesce 1 T229 T136
Coalesce 2
Coalesce 3
Coalesce 1 T230 T229
Coalesce 2
Coalesce 3
Coalesce 1 T25 T218
Coalesce 2
Coalesce 3
Coalesce 1 eax T24
Coalesce 2
Coalesce 3
Coalesce 1 eax T28
Coalesce 2
Coalesce 3
Coalesce 1 eax T31
Coalesce 2
Coalesce 3
Coalesce 1 eax T33
Coalesce 2
Coalesce 3
Coalesce 1 eax T35
Coalesce 2
Coalesce 3
JAMON EN simplify
JAMON EN freeze
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
CODIGO: 
0	LABEL {assem = readint_L0:
 lab = readint_L0}
1	OPER {assem = movl `d0,$0
 dst = T2 , src = , _ jump = _}
2	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
3	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
4	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
5	OPER {assem = call skipto_L1
 dst = T323 , src = , _ jump = _}
6	OPER {assem = movl 16(%ebp), `s0 dst = , src = T323 , _ jump = _}
7	OPER {assem = addl %esp,$4
 dst = T324 ecx edx , src = , _ jump = _}
8	OPER {assem = movl 20(%ebp), `s0 dst = , src = T324 , _ jump = _}
9	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
10	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
11	OPER {assem = movl `d0, 24(%ebp) dst = T325 , src = , _ jump = _}
12	MOVE {assem = movl `d0,`s0
, dst =T25, src =T325}
13	OPER {assem = movl `d0,$0
 dst = T326 , src = , _ jump = _}
14	OPER {assem = movl 28(%ebp), `s0 dst = , src = T326 , _ jump = _}
15	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
16	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
17	OPER {assem = pushl `s0
 dst = , src = T25 , _ jump = _}
18	OPER {assem = call _checkNil
 dst = T327 , src = , _ jump = _}
19	OPER {assem = movl 32(%ebp), `s0 dst = , src = T327 , _ jump = _}
20	OPER {assem = addl %esp,$4
 dst = T328 ecx edx , src = , _ jump = _}
21	OPER {assem = movl 36(%ebp), `s0 dst = , src = T328 , _ jump = _}
22	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
23	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
24	MOVE {assem = movlE1 `d0,`s0
, dst =T218, src =T25}
25	OPER {assem = movl `d0, 40(%ebp) dst = T330 , src = , _ jump = _}
26	OPER {assem = imul `d0,`s0*$4
 dst = T329 , src = T330 , _ jump = _}
27	OPER {assem = movl 40(%ebp), `s0 dst = , src = T329 , _ jump = _}
28	OPER {assem = movl `d0, 44(%ebp) dst = T331 , src = , _ jump = _}
29	OPER {assem = addl `d0,`s0
 dst = T218 , src = T331 , _ jump = _}
30	MOVE {assem = movl `d0,`s0
, dst =T332, src =T218}
31	OPER {assem = movl 48(%ebp), `s0 dst = , src = T332 , _ jump = _}
32	OPER {assem = movl `d0,(s0+8)
 dst = T333 , src = ebp , _ jump = _}
33	OPER {assem = movl 52(%ebp), `s0 dst = , src = T333 , _ jump = _}
34	OPER {assem = movl `d0, 56(%ebp) dst = T335 , src = , _ jump = _}
35	OPER {assem = movl `d0,(s0+-4)
 dst = T334 , src = T335 , _ jump = _}
36	OPER {assem = movl 56(%ebp), `s0 dst = , src = T334 , _ jump = _}
37	OPER {assem = movl `d0, 60(%ebp) dst = T336 , src = , _ jump = _}
38	MOVE {assem = movl `d0,`s0
, dst =T337, src =T336}
39	OPER {assem = movl 60(%ebp), `s0 dst = , src = T337 , _ jump = _}
40	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
41	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
42	OPER {assem = movl `d0, 64(%ebp) dst = T338 , src = , _ jump = _}
43	OPER {assem = pushl `s0
 dst = , src = T338 , _ jump = _}
44	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
45	OPER {assem = call isdigit_L2
 dst = T339 , src = , _ jump = _}
46	OPER {assem = movl 68(%ebp), `s0 dst = , src = T339 , _ jump = _}
47	OPER {assem = addl %esp,$8
 dst = T340 ecx edx , src = , _ jump = _}
48	OPER {assem = movl 72(%ebp), `s0 dst = , src = T340 , _ jump = _}
49	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
50	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
51	OPER {assem = movl `d0, 76(%ebp) dst = T342 , src = , _ jump = _}
52	MOVE {assem = movl `d0,`s0
, dst =T341, src =T342}
53	OPER {assem = movl 76(%ebp), `s0 dst = , src = T341 , _ jump = _}
54	OPER {assem = movl `d0, 80(%ebp) dst = T343 , src = , _ jump = _}
55	OPER {assem = movl `d0, 80(%ebp) dst = T344 , src = , _ jump = _}
56	OPER {assem = movl (`s0),`s1
 dst = , src = T343 T344 , _ jump = _}
57	LABEL {assem = L33:
 lab = L33}
58	OPER {assem = movl `d0,(s0+8)
 dst = T345 , src = ebp , _ jump = _}
59	OPER {assem = movl 84(%ebp), `s0 dst = , src = T345 , _ jump = _}
60	OPER {assem = movl `d0, 88(%ebp) dst = T347 , src = , _ jump = _}
61	OPER {assem = movl `d0,(s0+-4)
 dst = T346 , src = T347 , _ jump = _}
62	OPER {assem = movl 88(%ebp), `s0 dst = , src = T346 , _ jump = _}
63	OPER {assem = movl `d0, 92(%ebp) dst = T348 , src = , _ jump = _}
64	MOVE {assem = movl `d0,`s0
, dst =T349, src =T348}
65	OPER {assem = movl 92(%ebp), `s0 dst = , src = T349 , _ jump = _}
66	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
67	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
68	OPER {assem = movl `d0, 96(%ebp) dst = T350 , src = , _ jump = _}
69	OPER {assem = pushl `s0
 dst = , src = T350 , _ jump = _}
70	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
71	OPER {assem = call isdigit_L2
 dst = T351 , src = , _ jump = _}
72	OPER {assem = movl 100(%ebp), `s0 dst = , src = T351 , _ jump = _}
73	OPER {assem = addl %esp,$8
 dst = T352 ecx edx , src = , _ jump = _}
74	OPER {assem = movl 104(%ebp), `s0 dst = , src = T352 , _ jump = _}
75	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
76	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
77	OPER {assem = movl `d0, 108(%ebp) dst = T354 , src = , _ jump = _}
78	MOVE {assem = movl `d0,`s0
, dst =T353, src =T354}
79	OPER {assem = movl 108(%ebp), `s0 dst = , src = T353 , _ jump = _}
80	OPER {assem = movl `d0, 112(%ebp) dst = T355 , src = , _ jump = _}
81	OPER {assem = cmpl `s0,$0
 dst = , src = T355 , _ jump = _}
82	OPER {assem = jne L34
 dst = , src = , _ jump = _}
83	LABEL {assem = L30:
 lab = L30}
84	MOVE {assem = movl `d0,`s0
, dst =T356, src =T2}
85	OPER {assem = movl 116(%ebp), `s0 dst = , src = T356 , _ jump = _}
86	OPER {assem = jmp L101
 dst = , src = , _ jump = _}
87	LABEL {assem = L34:
 lab = L34}
88	OPER {assem = imul `d0,`s0*$10
 dst = T357 , src = T2 , _ jump = _}
89	OPER {assem = movl 120(%ebp), `s0 dst = , src = T357 , _ jump = _}
90	OPER {assem = movl `d0, 124(%ebp) dst = T359 , src = , _ jump = _}
91	MOVE {assem = movl `d0,`s0
, dst =T358, src =T359}
92	OPER {assem = movl 124(%ebp), `s0 dst = , src = T358 , _ jump = _}
93	OPER {assem = movl `d0,(s0+8)
 dst = T360 , src = ebp , _ jump = _}
94	OPER {assem = movl 128(%ebp), `s0 dst = , src = T360 , _ jump = _}
95	OPER {assem = movl `d0, 132(%ebp) dst = T362 , src = , _ jump = _}
96	OPER {assem = movl `d0,(s0+-4)
 dst = T361 , src = T362 , _ jump = _}
97	OPER {assem = movl 132(%ebp), `s0 dst = , src = T361 , _ jump = _}
98	OPER {assem = movl `d0, 136(%ebp) dst = T363 , src = , _ jump = _}
99	MOVE {assem = movl `d0,`s0
, dst =T364, src =T363}
100	OPER {assem = movl 136(%ebp), `s0 dst = , src = T364 , _ jump = _}
101	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
102	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
103	OPER {assem = movl `d0, 140(%ebp) dst = T365 , src = , _ jump = _}
104	OPER {assem = pushl `s0
 dst = , src = T365 , _ jump = _}
105	OPER {assem = call ord
 dst = T366 , src = , _ jump = _}
106	OPER {assem = movl 144(%ebp), `s0 dst = , src = T366 , _ jump = _}
107	OPER {assem = addl %esp,$4
 dst = T367 ecx edx , src = , _ jump = _}
108	OPER {assem = movl 148(%ebp), `s0 dst = , src = T367 , _ jump = _}
109	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
110	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
111	OPER {assem = movl `d0, 152(%ebp) dst = T369 , src = , _ jump = _}
112	MOVE {assem = movl `d0,`s0
, dst =T368, src =T369}
113	OPER {assem = movl 152(%ebp), `s0 dst = , src = T368 , _ jump = _}
114	OPER {assem = movl `d0, 156(%ebp) dst = T370 , src = , _ jump = _}
115	MOVE {assem = movlE1 `d0,`s0
, dst =T227, src =T370}
116	OPER {assem = movl `d0, 160(%ebp) dst = T371 , src = , _ jump = _}
117	OPER {assem = addl `d0,`s0
 dst = T227 , src = T371 , _ jump = _}
118	MOVE {assem = movl `d0,`s0
, dst =T372, src =T227}
119	OPER {assem = movl 164(%ebp), `s0 dst = , src = T372 , _ jump = _}
120	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
121	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
122	OPER {assem = pushl L32
 dst = , src = , _ jump = _}
123	OPER {assem = call ord
 dst = T373 , src = , _ jump = _}
124	OPER {assem = movl 168(%ebp), `s0 dst = , src = T373 , _ jump = _}
125	OPER {assem = addl %esp,$4
 dst = T374 ecx edx , src = , _ jump = _}
126	OPER {assem = movl 172(%ebp), `s0 dst = , src = T374 , _ jump = _}
127	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
128	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
129	OPER {assem = movl `d0, 176(%ebp) dst = T376 , src = , _ jump = _}
130	MOVE {assem = movl `d0,`s0
, dst =T375, src =T376}
131	OPER {assem = movl 176(%ebp), `s0 dst = , src = T375 , _ jump = _}
132	OPER {assem = movl `d0, 180(%ebp) dst = T377 , src = , _ jump = _}
133	MOVE {assem = movl `d0,`s0
, dst =T228, src =T377}
134	OPER {assem = movl `d0, 184(%ebp) dst = T378 , src = , _ jump = _}
135	OPER {assem = subl `d0,`s0
 dst = T228 , src = T378 , _ jump = _}
136	MOVE {assem = movl `d0,`s0
, dst =T2, src =T228}
137	OPER {assem = movl `d0,(s0+8)
 dst = T379 , src = ebp , _ jump = _}
138	OPER {assem = movl 188(%ebp), `s0 dst = , src = T379 , _ jump = _}
139	OPER {assem = movl `d0, 192(%ebp) dst = T380 , src = , _ jump = _}
140	MOVE {assem = movlasdf `d0,`s0
, dst =T229, src =T380}
141	OPER {assem = addl `d0,$-4
 dst = T229 , src = , _ jump = _}
142	MOVE {assem = movl `d0,`s0
, dst =T381, src =T229}
143	OPER {assem = movl 196(%ebp), `s0 dst = , src = T381 , _ jump = _}
144	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
145	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
146	OPER {assem = call getstr
 dst = T382 , src = , _ jump = _}
147	OPER {assem = movl 200(%ebp), `s0 dst = , src = T382 , _ jump = _}
148	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
149	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
150	OPER {assem = movl `d0, 204(%ebp) dst = T384 , src = , _ jump = _}
151	MOVE {assem = movl `d0,`s0
, dst =T383, src =T384}
152	OPER {assem = movl 204(%ebp), `s0 dst = , src = T383 , _ jump = _}
153	OPER {assem = movl `d0, 208(%ebp) dst = T385 , src = , _ jump = _}
154	OPER {assem = movl `d0, 208(%ebp) dst = T386 , src = , _ jump = _}
155	OPER {assem = movl (`s0),`s1
 dst = , src = T385 T386 , _ jump = _}
156	OPER {assem = jmp L33
 dst = , src = , _ jump = _}
157	LABEL {assem = L101:
 lab = L101}

MOVE {assem = movl `d0,`s0
, dst =T25, src =T325}
A workListMoves -> T325 T25
MOVE {assem = movlE1 `d0,`s0
, dst =T218, src =T25}
A workListMoves -> T25 T218
MOVE {assem = movl `d0,`s0
, dst =T332, src =T218}
A workListMoves -> T218 T332
MOVE {assem = movl `d0,`s0
, dst =T337, src =T336}
A workListMoves -> T336 T337
MOVE {assem = movl `d0,`s0
, dst =T341, src =T342}
A workListMoves -> T342 T341
MOVE {assem = movl `d0,`s0
, dst =T349, src =T348}
A workListMoves -> T348 T349
MOVE {assem = movl `d0,`s0
, dst =T353, src =T354}
A workListMoves -> T354 T353
MOVE {assem = movl `d0,`s0
, dst =T356, src =T2}
A workListMoves -> T2 T356
MOVE {assem = movl `d0,`s0
, dst =T358, src =T359}
A workListMoves -> T359 T358
MOVE {assem = movl `d0,`s0
, dst =T364, src =T363}
A workListMoves -> T363 T364
MOVE {assem = movl `d0,`s0
, dst =T368, src =T369}
A workListMoves -> T369 T368
MOVE {assem = movlE1 `d0,`s0
, dst =T227, src =T370}
A workListMoves -> T370 T227
MOVE {assem = movl `d0,`s0
, dst =T372, src =T227}
A workListMoves -> T227 T372
MOVE {assem = movl `d0,`s0
, dst =T375, src =T376}
A workListMoves -> T376 T375
MOVE {assem = movl `d0,`s0
, dst =T228, src =T377}
A workListMoves -> T377 T228
MOVE {assem = movl `d0,`s0
, dst =T2, src =T228}
A workListMoves -> T228 T2
MOVE {assem = movlasdf `d0,`s0
, dst =T229, src =T380}
A workListMoves -> T380 T229
MOVE {assem = movl `d0,`s0
, dst =T381, src =T229}
A workListMoves -> T229 T381
MOVE {assem = movl `d0,`s0
, dst =T383, src =T384}
A workListMoves -> T384 T383
JAMON EN coalesce
Coalesce 1 T2 T356
Coalesce 2
Coalesce 3
Coalesce 1 T218 T332
Coalesce 2
Coalesce 3
Coalesce 1 T227 T372
Coalesce 2
Coalesce 3
Coalesce 1 T228 T2
Coalesce 2
Coalesce 3
Coalesce 1 T229 T381
Coalesce 2
Coalesce 3
Coalesce 1 T25 T218
Coalesce 2
Coalesce 3
Coalesce 1 T325 T25
Coalesce 2
Coalesce 3
Coalesce 1 T336 T337
Coalesce 2
Coalesce 3
Coalesce 1 T342 T341
Coalesce 2
Coalesce 3
Coalesce 1 T348 T349
Coalesce 2
Coalesce 3
Coalesce 1 T354 T353
Coalesce 2
Coalesce 3
Coalesce 1 T359 T358
Coalesce 2
Coalesce 3
Coalesce 1 T363 T364
Coalesce 2
Coalesce 3
Coalesce 1 T369 T368
Coalesce 2
Coalesce 3
Coalesce 1 T370 T227
Coalesce 2
Coalesce 3
Coalesce 1 T376 T375
Coalesce 2
Coalesce 3
Coalesce 1 T377 T228
Coalesce 2
Coalesce 3
Coalesce 1 T380 T229
Coalesce 2
Coalesce 3
Coalesce 1 T384 T383
Coalesce 2
Coalesce 3
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
~~~~~~~~~~> T2 eax
~~~~~~~~~~> T218 esi
~~~~~~~~~~> T227 edi
~~~~~~~~~~> T228 edx
~~~~~~~~~~> T229 ecx
~~~~~~~~~~> T25 ebx
CODIGO: 
0	LABEL {assem = readlist_L38:
 lab = readlist_L38}
1	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
2	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
3	OPER {assem = pushl $0
 dst = , src = , _ jump = _}
4	OPER {assem = pushl $1
 dst = , src = , _ jump = _}
5	OPER {assem = call _allocRecord
 dst = eax , src = , _ jump = _}
6	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
7	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
8	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
9	MOVE {assem = movl `d0,`s0
, dst =T36, src =T231}
10	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
11	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
12	OPER {assem = pushl `s0
 dst = , src = T36 , _ jump = _}
13	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
14	OPER {assem = call readint_L0
 dst = eax , src = , _ jump = _}
15	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
16	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
17	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
18	MOVE {assem = movl `d0,`s0
, dst =T37, src =eax}
19	MOVE {assem = movl `d0,`s0
, dst =T38, src =T37}
20	MOVE {assem = movl `d0,`s0
, dst =T39, src =T36}
21	OPER {assem = movl `d0,$0
 dst = T40 , src = , _ jump = _}
22	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
23	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
24	OPER {assem = pushl `s0
 dst = , src = T39 , _ jump = _}
25	OPER {assem = call _checkNil
 dst = eax , src = , _ jump = _}
26	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
27	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
28	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
29	MOVE {assem = movlE1 `d0,`s0
, dst =T233, src =T39}
30	OPER {assem = imul `d0,`s0*$4
 dst = T234 , src = T40 , _ jump = _}
31	OPER {assem = addl `d0,`s0
 dst = T233 , src = T234 , _ jump = _}
32	OPER {assem = movl `d0,(`s0+0)
 dst = T232 , src = T233 , _ jump = _}
33	OPER {assem = cmpl `s0,$0
 dst = , src = T232 , _ jump = _}
34	OPER {assem = jne L39
 dst = , src = , _ jump = _}
35	LABEL {assem = L40:
 lab = L40}
36	OPER {assem = movl `d0,$0
 dst = T42 , src = , _ jump = _}
37	LABEL {assem = L41:
 lab = L41}
38	MOVE {assem = movl `d0,`s0
, dst =eax, src =T42}
39	OPER {assem = jmp L102
 dst = , src = , _ jump = _}
40	LABEL {assem = L39:
 lab = L39}
41	MOVE {assem = movl `d0,`s0
, dst =T137, src =T38}
42	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
43	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
44	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
45	OPER {assem = call readlist_L38
 dst = eax , src = , _ jump = _}
46	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
47	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
48	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
49	MOVE {assem = movl `d0,`s0
, dst =T41, src =eax}
50	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
51	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
52	OPER {assem = pushl `s0
 dst = , src = T41 , _ jump = _}
53	OPER {assem = pushl `s0
 dst = , src = T137 , _ jump = _}
54	OPER {assem = pushl $2
 dst = , src = , _ jump = _}
55	OPER {assem = call _allocRecord
 dst = eax , src = , _ jump = _}
56	OPER {assem = addl %esp,$12
 dst = eax ecx edx , src = , _ jump = _}
57	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
58	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
59	MOVE {assem = movl `d0,`s0
, dst =T42, src =T235}
60	OPER {assem = jmp L41
 dst = , src = , _ jump = _}
61	LABEL {assem = L102:
 lab = L102}

MOVE {assem = movl `d0,`s0
, dst =T36, src =T231}
A workListMoves -> T231 T36
MOVE {assem = movl `d0,`s0
, dst =T37, src =eax}
A workListMoves -> eax T37
MOVE {assem = movl `d0,`s0
, dst =T38, src =T37}
A workListMoves -> T37 T38
MOVE {assem = movl `d0,`s0
, dst =T39, src =T36}
A workListMoves -> T36 T39
MOVE {assem = movlE1 `d0,`s0
, dst =T233, src =T39}
A workListMoves -> T39 T233
MOVE {assem = movl `d0,`s0
, dst =eax, src =T42}
A workListMoves -> T42 eax
MOVE {assem = movl `d0,`s0
, dst =T137, src =T38}
A workListMoves -> T38 T137
MOVE {assem = movl `d0,`s0
, dst =T41, src =eax}
A workListMoves -> eax T41
MOVE {assem = movl `d0,`s0
, dst =T42, src =T235}
A workListMoves -> T235 T42
JAMON EN coalesce
Coalesce 1 T231 T36
Coalesce 2
Coalesce 3
Coalesce 1 T235 T42
Coalesce 2
Coalesce 3
Coalesce 1 T36 T39
Coalesce 2
Coalesce 3
Coalesce 1 T37 T38
Coalesce 2
Coalesce 3
Coalesce 1 T38 T137
Coalesce 2
Coalesce 3
Coalesce 1 T39 T233
Coalesce 2
Coalesce 3
Coalesce 1 T42 eax
Coalesce 2
Coalesce 3
Coalesce 1 eax T37
Coalesce 2
Coalesce 3
Coalesce 1 eax T41
Coalesce 2
Coalesce 3
JAMON EN simplify
JAMON EN freeze
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
CODIGO: 
0	LABEL {assem = readlist_L38:
 lab = readlist_L38}
1	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
2	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
3	OPER {assem = pushl $0
 dst = , src = , _ jump = _}
4	OPER {assem = pushl $1
 dst = , src = , _ jump = _}
5	OPER {assem = call _allocRecord
 dst = T387 , src = , _ jump = _}
6	OPER {assem = movl 16(%ebp), `s0 dst = , src = T387 , _ jump = _}
7	OPER {assem = addl %esp,$8
 dst = T388 ecx edx , src = , _ jump = _}
8	OPER {assem = movl 20(%ebp), `s0 dst = , src = T388 , _ jump = _}
9	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
10	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
11	OPER {assem = movl `d0, 24(%ebp) dst = T389 , src = , _ jump = _}
12	MOVE {assem = movl `d0,`s0
, dst =T36, src =T389}
13	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
14	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
15	OPER {assem = pushl `s0
 dst = , src = T36 , _ jump = _}
16	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
17	OPER {assem = call readint_L0
 dst = T390 , src = , _ jump = _}
18	OPER {assem = movl 28(%ebp), `s0 dst = , src = T390 , _ jump = _}
19	OPER {assem = addl %esp,$8
 dst = T391 ecx edx , src = , _ jump = _}
20	OPER {assem = movl 32(%ebp), `s0 dst = , src = T391 , _ jump = _}
21	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
22	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
23	OPER {assem = movl `d0, 36(%ebp) dst = T393 , src = , _ jump = _}
24	MOVE {assem = movl `d0,`s0
, dst =T392, src =T393}
25	OPER {assem = movl 36(%ebp), `s0 dst = , src = T392 , _ jump = _}
26	OPER {assem = movl `d0, 40(%ebp) dst = T394 , src = , _ jump = _}
27	MOVE {assem = movl `d0,`s0
, dst =T395, src =T394}
28	OPER {assem = movl 40(%ebp), `s0 dst = , src = T395 , _ jump = _}
29	MOVE {assem = movl `d0,`s0
, dst =T39, src =T36}
30	OPER {assem = movl `d0,$0
 dst = T40 , src = , _ jump = _}
31	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
32	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
33	OPER {assem = pushl `s0
 dst = , src = T39 , _ jump = _}
34	OPER {assem = call _checkNil
 dst = T396 , src = , _ jump = _}
35	OPER {assem = movl 44(%ebp), `s0 dst = , src = T396 , _ jump = _}
36	OPER {assem = addl %esp,$4
 dst = T397 ecx edx , src = , _ jump = _}
37	OPER {assem = movl 48(%ebp), `s0 dst = , src = T397 , _ jump = _}
38	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
39	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
40	MOVE {assem = movlE1 `d0,`s0
, dst =T233, src =T39}
41	OPER {assem = imul `d0,`s0*$4
 dst = T398 , src = T40 , _ jump = _}
42	OPER {assem = movl 52(%ebp), `s0 dst = , src = T398 , _ jump = _}
43	OPER {assem = movl `d0, 56(%ebp) dst = T399 , src = , _ jump = _}
44	OPER {assem = addl `d0,`s0
 dst = T233 , src = T399 , _ jump = _}
45	OPER {assem = movl `d0,(`s0+0)
 dst = T400 , src = T233 , _ jump = _}
46	OPER {assem = movl 60(%ebp), `s0 dst = , src = T400 , _ jump = _}
47	OPER {assem = movl `d0, 64(%ebp) dst = T401 , src = , _ jump = _}
48	OPER {assem = cmpl `s0,$0
 dst = , src = T401 , _ jump = _}
49	OPER {assem = jne L39
 dst = , src = , _ jump = _}
50	LABEL {assem = L40:
 lab = L40}
51	OPER {assem = movl `d0,$0
 dst = T42 , src = , _ jump = _}
52	LABEL {assem = L41:
 lab = L41}
53	MOVE {assem = movl `d0,`s0
, dst =T402, src =T42}
54	OPER {assem = movl 68(%ebp), `s0 dst = , src = T402 , _ jump = _}
55	OPER {assem = jmp L102
 dst = , src = , _ jump = _}
56	LABEL {assem = L39:
 lab = L39}
57	OPER {assem = movl `d0, 72(%ebp) dst = T404 , src = , _ jump = _}
58	MOVE {assem = movl `d0,`s0
, dst =T403, src =T404}
59	OPER {assem = movl 72(%ebp), `s0 dst = , src = T403 , _ jump = _}
60	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
61	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
62	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
63	OPER {assem = call readlist_L38
 dst = T405 , src = , _ jump = _}
64	OPER {assem = movl 76(%ebp), `s0 dst = , src = T405 , _ jump = _}
65	OPER {assem = addl %esp,$4
 dst = T406 ecx edx , src = , _ jump = _}
66	OPER {assem = movl 80(%ebp), `s0 dst = , src = T406 , _ jump = _}
67	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
68	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
69	OPER {assem = movl `d0, 84(%ebp) dst = T407 , src = , _ jump = _}
70	MOVE {assem = movl `d0,`s0
, dst =T41, src =T407}
71	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
72	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
73	OPER {assem = pushl `s0
 dst = , src = T41 , _ jump = _}
74	OPER {assem = movl `d0, 88(%ebp) dst = T408 , src = , _ jump = _}
75	OPER {assem = pushl `s0
 dst = , src = T408 , _ jump = _}
76	OPER {assem = pushl $2
 dst = , src = , _ jump = _}
77	OPER {assem = call _allocRecord
 dst = T409 , src = , _ jump = _}
78	OPER {assem = movl 92(%ebp), `s0 dst = , src = T409 , _ jump = _}
79	OPER {assem = addl %esp,$12
 dst = T410 ecx edx , src = , _ jump = _}
80	OPER {assem = movl 96(%ebp), `s0 dst = , src = T410 , _ jump = _}
81	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
82	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
83	OPER {assem = movl `d0, 100(%ebp) dst = T411 , src = , _ jump = _}
84	MOVE {assem = movl `d0,`s0
, dst =T42, src =T411}
85	OPER {assem = jmp L41
 dst = , src = , _ jump = _}
86	LABEL {assem = L102:
 lab = L102}

MOVE {assem = movl `d0,`s0
, dst =T36, src =T389}
A workListMoves -> T389 T36
MOVE {assem = movl `d0,`s0
, dst =T392, src =T393}
A workListMoves -> T393 T392
MOVE {assem = movl `d0,`s0
, dst =T395, src =T394}
A workListMoves -> T394 T395
MOVE {assem = movl `d0,`s0
, dst =T39, src =T36}
A workListMoves -> T36 T39
MOVE {assem = movlE1 `d0,`s0
, dst =T233, src =T39}
A workListMoves -> T39 T233
MOVE {assem = movl `d0,`s0
, dst =T402, src =T42}
A workListMoves -> T42 T402
MOVE {assem = movl `d0,`s0
, dst =T403, src =T404}
A workListMoves -> T404 T403
MOVE {assem = movl `d0,`s0
, dst =T41, src =T407}
A workListMoves -> T407 T41
MOVE {assem = movl `d0,`s0
, dst =T42, src =T411}
A workListMoves -> T411 T42
JAMON EN coalesce
Coalesce 1 T36 T39
Coalesce 2
Coalesce 3
Coalesce 1 T389 T36
Coalesce 2
Coalesce 3
Coalesce 1 T39 T233
Coalesce 2
Coalesce 3
Coalesce 1 T393 T392
Coalesce 2
Coalesce 3
Coalesce 1 T394 T395
Coalesce 2
Coalesce 3
Coalesce 1 T404 T403
Coalesce 2
Coalesce 3
Coalesce 1 T407 T41
Coalesce 2
Coalesce 3
Coalesce 1 T411 T42
Coalesce 2
Coalesce 3
Coalesce 1 T42 T402
Coalesce 2
Coalesce 3
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
~~~~~~~~~~> T233 edx
~~~~~~~~~~> T36 ecx
~~~~~~~~~~> T39 ebx
~~~~~~~~~~> T40 esi
~~~~~~~~~~> T41 edi
~~~~~~~~~~> T42 eax
CODIGO: 
0	LABEL {assem = merge_L37:
 lab = merge_L37}
1	OPER {assem = cmpl `s0,$0
 dst = , src = T43 , _ jump = _}
2	OPER {assem = je L60
 dst = , src = , _ jump = _}
3	LABEL {assem = L61:
 lab = L61}
4	OPER {assem = cmpl `s0,$0
 dst = , src = T44 , _ jump = _}
5	OPER {assem = je L55
 dst = , src = , _ jump = _}
6	LABEL {assem = L56:
 lab = L56}
7	MOVE {assem = movl `d0,`s0
, dst =T47, src =T43}
8	OPER {assem = movl `d0,$0
 dst = T48 , src = , _ jump = _}
9	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
10	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
11	OPER {assem = pushl `s0
 dst = , src = T47 , _ jump = _}
12	OPER {assem = call _checkNil
 dst = eax , src = , _ jump = _}
13	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
14	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
15	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
16	MOVE {assem = movlE1 `d0,`s0
, dst =T237, src =T47}
17	OPER {assem = imul `d0,`s0*$4
 dst = T238 , src = T48 , _ jump = _}
18	OPER {assem = addl `d0,`s0
 dst = T237 , src = T238 , _ jump = _}
19	OPER {assem = movl `d0,(`s0+0)
 dst = T236 , src = T237 , _ jump = _}
20	MOVE {assem = movl `d0,`s0
, dst =T138, src =T236}
21	MOVE {assem = movl `d0,`s0
, dst =T49, src =T44}
22	OPER {assem = movl `d0,$0
 dst = T50 , src = , _ jump = _}
23	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
24	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
25	OPER {assem = pushl `s0
 dst = , src = T49 , _ jump = _}
26	OPER {assem = call _checkNil
 dst = eax , src = , _ jump = _}
27	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
28	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
29	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
30	MOVE {assem = movlE1 `d0,`s0
, dst =T240, src =T49}
31	OPER {assem = imul `d0,`s0*$4
 dst = T241 , src = T50 , _ jump = _}
32	OPER {assem = addl `d0,`s0
 dst = T240 , src = T241 , _ jump = _}
33	OPER {assem = movl `d0,(`s0+0)
 dst = T239 , src = T240 , _ jump = _}
34	OPER {assem = cmpl `s0,`s1
 dst = , src = T138 T239 , _ jump = _}
35	OPER {assem = jl L50
 dst = , src = , _ jump = _}
36	LABEL {assem = L51:
 lab = L51}
37	MOVE {assem = movl `d0,`s0
, dst =T60, src =T44}
38	OPER {assem = movl `d0,$0
 dst = T61 , src = , _ jump = _}
39	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
40	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
41	OPER {assem = pushl `s0
 dst = , src = T60 , _ jump = _}
42	OPER {assem = call _checkNil
 dst = eax , src = , _ jump = _}
43	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
44	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
45	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
46	MOVE {assem = movlE1 `d0,`s0
, dst =T243, src =T60}
47	OPER {assem = imul `d0,`s0*$4
 dst = T244 , src = T61 , _ jump = _}
48	OPER {assem = addl `d0,`s0
 dst = T243 , src = T244 , _ jump = _}
49	OPER {assem = movl `d0,(`s0+0)
 dst = T242 , src = T243 , _ jump = _}
50	MOVE {assem = movl `d0,`s0
, dst =T140, src =T242}
51	MOVE {assem = movl `d0,`s0
, dst =T64, src =T44}
52	OPER {assem = movl `d0,$1
 dst = T65 , src = , _ jump = _}
53	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
54	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
55	OPER {assem = pushl `s0
 dst = , src = T64 , _ jump = _}
56	OPER {assem = call _checkNil
 dst = eax , src = , _ jump = _}
57	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
58	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
59	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
60	MOVE {assem = movlE1 `d0,`s0
, dst =T246, src =T64}
61	OPER {assem = imul `d0,`s0*$4
 dst = T247 , src = T65 , _ jump = _}
62	OPER {assem = addl `d0,`s0
 dst = T246 , src = T247 , _ jump = _}
63	OPER {assem = movl `d0,(`s0+0)
 dst = T245 , src = T246 , _ jump = _}
64	MOVE {assem = movl `d0,`s0
, dst =T66, src =T245}
65	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
66	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
67	OPER {assem = pushl `s0
 dst = , src = T66 , _ jump = _}
68	OPER {assem = pushl `s0
 dst = , src = T43 , _ jump = _}
69	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
70	OPER {assem = call merge_L37
 dst = eax , src = , _ jump = _}
71	OPER {assem = addl %esp,$12
 dst = eax ecx edx , src = , _ jump = _}
72	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
73	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
74	MOVE {assem = movl `d0,`s0
, dst =T67, src =eax}
75	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
76	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
77	OPER {assem = pushl `s0
 dst = , src = T67 , _ jump = _}
78	OPER {assem = pushl `s0
 dst = , src = T140 , _ jump = _}
79	OPER {assem = pushl $2
 dst = , src = , _ jump = _}
80	OPER {assem = call _allocRecord
 dst = eax , src = , _ jump = _}
81	OPER {assem = addl %esp,$12
 dst = eax ecx edx , src = , _ jump = _}
82	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
83	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
84	MOVE {assem = movl `d0,`s0
, dst =T69, src =T248}
85	LABEL {assem = L52:
 lab = L52}
86	MOVE {assem = movl `d0,`s0
, dst =T71, src =T69}
87	LABEL {assem = L57:
 lab = L57}
88	MOVE {assem = movl `d0,`s0
, dst =T73, src =T71}
89	LABEL {assem = L62:
 lab = L62}
90	MOVE {assem = movl `d0,`s0
, dst =eax, src =T73}
91	OPER {assem = jmp L103
 dst = , src = , _ jump = _}
92	LABEL {assem = L60:
 lab = L60}
93	MOVE {assem = movl `d0,`s0
, dst =T73, src =T44}
94	OPER {assem = jmp L62
 dst = , src = , _ jump = _}
95	LABEL {assem = L55:
 lab = L55}
96	MOVE {assem = movl `d0,`s0
, dst =T71, src =T43}
97	OPER {assem = jmp L57
 dst = , src = , _ jump = _}
98	LABEL {assem = L50:
 lab = L50}
99	MOVE {assem = movl `d0,`s0
, dst =T52, src =T43}
100	OPER {assem = movl `d0,$0
 dst = T53 , src = , _ jump = _}
101	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
102	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
103	OPER {assem = pushl `s0
 dst = , src = T52 , _ jump = _}
104	OPER {assem = call _checkNil
 dst = eax , src = , _ jump = _}
105	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
106	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
107	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
108	MOVE {assem = movlE1 `d0,`s0
, dst =T250, src =T52}
109	OPER {assem = imul `d0,`s0*$4
 dst = T251 , src = T53 , _ jump = _}
110	OPER {assem = addl `d0,`s0
 dst = T250 , src = T251 , _ jump = _}
111	OPER {assem = movl `d0,(`s0+0)
 dst = T249 , src = T250 , _ jump = _}
112	MOVE {assem = movl `d0,`s0
, dst =T139, src =T249}
113	MOVE {assem = movl `d0,`s0
, dst =T56, src =T43}
114	OPER {assem = movl `d0,$1
 dst = T57 , src = , _ jump = _}
115	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
116	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
117	OPER {assem = pushl `s0
 dst = , src = T56 , _ jump = _}
118	OPER {assem = call _checkNil
 dst = eax , src = , _ jump = _}
119	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
120	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
121	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
122	MOVE {assem = movlE1 `d0,`s0
, dst =T253, src =T56}
123	OPER {assem = imul `d0,`s0*$4
 dst = T254 , src = T57 , _ jump = _}
124	OPER {assem = addl `d0,`s0
 dst = T253 , src = T254 , _ jump = _}
125	OPER {assem = movl `d0,(`s0+0)
 dst = T252 , src = T253 , _ jump = _}
126	MOVE {assem = movl `d0,`s0
, dst =T58, src =T252}
127	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
128	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
129	OPER {assem = pushl `s0
 dst = , src = T44 , _ jump = _}
130	OPER {assem = pushl `s0
 dst = , src = T58 , _ jump = _}
131	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
132	OPER {assem = call merge_L37
 dst = eax , src = , _ jump = _}
133	OPER {assem = addl %esp,$12
 dst = eax ecx edx , src = , _ jump = _}
134	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
135	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
136	MOVE {assem = movl `d0,`s0
, dst =T59, src =eax}
137	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
138	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
139	OPER {assem = pushl `s0
 dst = , src = T59 , _ jump = _}
140	OPER {assem = pushl `s0
 dst = , src = T139 , _ jump = _}
141	OPER {assem = pushl $2
 dst = , src = , _ jump = _}
142	OPER {assem = call _allocRecord
 dst = eax , src = , _ jump = _}
143	OPER {assem = addl %esp,$12
 dst = eax ecx edx , src = , _ jump = _}
144	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
145	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
146	MOVE {assem = movl `d0,`s0
, dst =T69, src =T255}
147	OPER {assem = jmp L52
 dst = , src = , _ jump = _}
148	LABEL {assem = L103:
 lab = L103}

MOVE {assem = movl `d0,`s0
, dst =T47, src =T43}
A workListMoves -> T43 T47
MOVE {assem = movlE1 `d0,`s0
, dst =T237, src =T47}
A workListMoves -> T47 T237
MOVE {assem = movl `d0,`s0
, dst =T138, src =T236}
A workListMoves -> T236 T138
MOVE {assem = movl `d0,`s0
, dst =T49, src =T44}
A workListMoves -> T44 T49
MOVE {assem = movlE1 `d0,`s0
, dst =T240, src =T49}
A workListMoves -> T49 T240
MOVE {assem = movl `d0,`s0
, dst =T60, src =T44}
A workListMoves -> T44 T60
MOVE {assem = movlE1 `d0,`s0
, dst =T243, src =T60}
A workListMoves -> T60 T243
MOVE {assem = movl `d0,`s0
, dst =T140, src =T242}
A workListMoves -> T242 T140
MOVE {assem = movl `d0,`s0
, dst =T64, src =T44}
A workListMoves -> T44 T64
MOVE {assem = movlE1 `d0,`s0
, dst =T246, src =T64}
A workListMoves -> T64 T246
MOVE {assem = movl `d0,`s0
, dst =T66, src =T245}
A workListMoves -> T245 T66
MOVE {assem = movl `d0,`s0
, dst =T67, src =eax}
A workListMoves -> eax T67
MOVE {assem = movl `d0,`s0
, dst =T69, src =T248}
A workListMoves -> T248 T69
MOVE {assem = movl `d0,`s0
, dst =T71, src =T69}
A workListMoves -> T69 T71
MOVE {assem = movl `d0,`s0
, dst =T73, src =T71}
A workListMoves -> T71 T73
MOVE {assem = movl `d0,`s0
, dst =eax, src =T73}
A workListMoves -> T73 eax
MOVE {assem = movl `d0,`s0
, dst =T73, src =T44}
A workListMoves -> T44 T73
MOVE {assem = movl `d0,`s0
, dst =T71, src =T43}
A workListMoves -> T43 T71
MOVE {assem = movl `d0,`s0
, dst =T52, src =T43}
A workListMoves -> T43 T52
MOVE {assem = movlE1 `d0,`s0
, dst =T250, src =T52}
A workListMoves -> T52 T250
MOVE {assem = movl `d0,`s0
, dst =T139, src =T249}
A workListMoves -> T249 T139
MOVE {assem = movl `d0,`s0
, dst =T56, src =T43}
A workListMoves -> T43 T56
MOVE {assem = movlE1 `d0,`s0
, dst =T253, src =T56}
A workListMoves -> T56 T253
MOVE {assem = movl `d0,`s0
, dst =T58, src =T252}
A workListMoves -> T252 T58
MOVE {assem = movl `d0,`s0
, dst =T59, src =eax}
A workListMoves -> eax T59
MOVE {assem = movl `d0,`s0
, dst =T69, src =T255}
A workListMoves -> T255 T69
JAMON EN coalesce
Coalesce 1 T236 T138
Coalesce 2
Coalesce 3
Coalesce 1 T242 T140
Coalesce 2
Coalesce 3
Coalesce 1 T245 T66
Coalesce 2
Coalesce 3
Coalesce 1 T248 T69
Coalesce 2
Coalesce 3
Coalesce 1 T249 T139
Coalesce 2
Coalesce 3
Coalesce 1 T252 T58
Coalesce 2
Coalesce 3
Coalesce 1 T255 T69
Coalesce 2
Coalesce 3
Coalesce 1 T43 T47
Coalesce 2
Coalesce 3
Coalesce 1 T43 T52
Coalesce 2
Coalesce 3
Coalesce 1 T43 T56
Coalesce 2
Coalesce 3
Coalesce 1 T43 T71
Coalesce 2
Coalesce 3
Coalesce 1 T44 T49
Coalesce 2
Coalesce 3
Coalesce 1 T44 T60
Coalesce 2
Coalesce 3
Coalesce 1 T44 T64
Coalesce 2
Coalesce 3
Coalesce 1 T44 T73
Coalesce 2
Coalesce 3
Coalesce 1 T47 T237
Coalesce 2
Coalesce 3
Coalesce 1 T49 T240
Coalesce 2
Coalesce 3
Coalesce 1 T52 T250
Coalesce 2
Coalesce 3
Coalesce 1 T56 T253
Coalesce 2
Coalesce 3
Coalesce 1 T60 T243
Coalesce 2
Coalesce 3
Coalesce 1 T64 T246
Coalesce 2
Coalesce 3
Coalesce 1 T69 T71
Coalesce 2
Coalesce 3
Coalesce 1 T71 T73
Coalesce 2
Coalesce 3
Coalesce 1 T73 eax
Coalesce 2
Coalesce 3
Coalesce 1 eax T59
Coalesce 2
Coalesce 3
Coalesce 1 eax T67
Coalesce 2
Coalesce 3
JAMON EN simplify
JAMON EN freeze
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN coalesce
Coalesce 1 T44 T49
Coalesce 2
Coalesce 3
Coalesce 1 T44 T60
Coalesce 2
Coalesce 3
Coalesce 1 T44 T64
Coalesce 2
Coalesce 3
Coalesce 1 T44 T73
Coalesce 2
Coalesce 3
JAMON EN freeze
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
CODIGO: 
0	LABEL {assem = merge_L37:
 lab = merge_L37}
1	OPER {assem = movl `d0, 16(%ebp) dst = T412 , src = , _ jump = _}
2	OPER {assem = cmpl `s0,$0
 dst = , src = T412 , _ jump = _}
3	OPER {assem = je L60
 dst = , src = , _ jump = _}
4	LABEL {assem = L61:
 lab = L61}
5	OPER {assem = movl `d0, 20(%ebp) dst = T413 , src = , _ jump = _}
6	OPER {assem = cmpl `s0,$0
 dst = , src = T413 , _ jump = _}
7	OPER {assem = je L55
 dst = , src = , _ jump = _}
8	LABEL {assem = L56:
 lab = L56}
9	OPER {assem = movl `d0, 24(%ebp) dst = T414 , src = , _ jump = _}
10	MOVE {assem = movl `d0,`s0
, dst =T415, src =T414}
11	OPER {assem = movl 24(%ebp), `s0 dst = , src = T415 , _ jump = _}
12	OPER {assem = movl `d0,$0
 dst = T416 , src = , _ jump = _}
13	OPER {assem = movl 28(%ebp), `s0 dst = , src = T416 , _ jump = _}
14	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
15	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
16	OPER {assem = movl `d0, 32(%ebp) dst = T417 , src = , _ jump = _}
17	OPER {assem = pushl `s0
 dst = , src = T417 , _ jump = _}
18	OPER {assem = call _checkNil
 dst = T418 , src = , _ jump = _}
19	OPER {assem = movl 36(%ebp), `s0 dst = , src = T418 , _ jump = _}
20	OPER {assem = addl %esp,$4
 dst = T419 ecx edx , src = , _ jump = _}
21	OPER {assem = movl 40(%ebp), `s0 dst = , src = T419 , _ jump = _}
22	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
23	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
24	OPER {assem = movl `d0, 44(%ebp) dst = T421 , src = , _ jump = _}
25	MOVE {assem = movlE1 `d0,`s0
, dst =T420, src =T421}
26	OPER {assem = movl 44(%ebp), `s0 dst = , src = T420 , _ jump = _}
27	OPER {assem = movl `d0, 48(%ebp) dst = T423 , src = , _ jump = _}
28	OPER {assem = imul `d0,`s0*$4
 dst = T422 , src = T423 , _ jump = _}
29	OPER {assem = movl 48(%ebp), `s0 dst = , src = T422 , _ jump = _}
30	OPER {assem = movl `d0, 52(%ebp) dst = T425 , src = , _ jump = _}
31	OPER {assem = addl `d0,`s0
 dst = T424 , src = T425 , _ jump = _}
32	OPER {assem = movl 52(%ebp), `s0 dst = , src = T424 , _ jump = _}
33	OPER {assem = movl `d0, 56(%ebp) dst = T427 , src = , _ jump = _}
34	OPER {assem = movl `d0,(`s0+0)
 dst = T426 , src = T427 , _ jump = _}
35	OPER {assem = movl 56(%ebp), `s0 dst = , src = T426 , _ jump = _}
36	OPER {assem = movl `d0, 60(%ebp) dst = T429 , src = , _ jump = _}
37	MOVE {assem = movl `d0,`s0
, dst =T428, src =T429}
38	OPER {assem = movl 60(%ebp), `s0 dst = , src = T428 , _ jump = _}
39	OPER {assem = movl `d0, 64(%ebp) dst = T430 , src = , _ jump = _}
40	MOVE {assem = movl `d0,`s0
, dst =T431, src =T430}
41	OPER {assem = movl 64(%ebp), `s0 dst = , src = T431 , _ jump = _}
42	OPER {assem = movl `d0,$0
 dst = T432 , src = , _ jump = _}
43	OPER {assem = movl 68(%ebp), `s0 dst = , src = T432 , _ jump = _}
44	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
45	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
46	OPER {assem = movl `d0, 72(%ebp) dst = T433 , src = , _ jump = _}
47	OPER {assem = pushl `s0
 dst = , src = T433 , _ jump = _}
48	OPER {assem = call _checkNil
 dst = T434 , src = , _ jump = _}
49	OPER {assem = movl 76(%ebp), `s0 dst = , src = T434 , _ jump = _}
50	OPER {assem = addl %esp,$4
 dst = T435 ecx edx , src = , _ jump = _}
51	OPER {assem = movl 80(%ebp), `s0 dst = , src = T435 , _ jump = _}
52	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
53	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
54	OPER {assem = movl `d0, 84(%ebp) dst = T437 , src = , _ jump = _}
55	MOVE {assem = movlE1 `d0,`s0
, dst =T436, src =T437}
56	OPER {assem = movl 84(%ebp), `s0 dst = , src = T436 , _ jump = _}
57	OPER {assem = movl `d0, 88(%ebp) dst = T439 , src = , _ jump = _}
58	OPER {assem = imul `d0,`s0*$4
 dst = T438 , src = T439 , _ jump = _}
59	OPER {assem = movl 88(%ebp), `s0 dst = , src = T438 , _ jump = _}
60	OPER {assem = movl `d0, 92(%ebp) dst = T441 , src = , _ jump = _}
61	OPER {assem = addl `d0,`s0
 dst = T440 , src = T441 , _ jump = _}
62	OPER {assem = movl 92(%ebp), `s0 dst = , src = T440 , _ jump = _}
63	OPER {assem = movl `d0, 96(%ebp) dst = T443 , src = , _ jump = _}
64	OPER {assem = movl `d0,(`s0+0)
 dst = T442 , src = T443 , _ jump = _}
65	OPER {assem = movl 96(%ebp), `s0 dst = , src = T442 , _ jump = _}
66	OPER {assem = movl `d0, 100(%ebp) dst = T444 , src = , _ jump = _}
67	OPER {assem = movl `d0, 100(%ebp) dst = T445 , src = , _ jump = _}
68	OPER {assem = cmpl `s0,`s1
 dst = , src = T444 T445 , _ jump = _}
69	OPER {assem = jl L50
 dst = , src = , _ jump = _}
70	LABEL {assem = L51:
 lab = L51}
71	OPER {assem = movl `d0, 104(%ebp) dst = T446 , src = , _ jump = _}
72	MOVE {assem = movl `d0,`s0
, dst =T447, src =T446}
73	OPER {assem = movl 104(%ebp), `s0 dst = , src = T447 , _ jump = _}
74	OPER {assem = movl `d0,$0
 dst = T448 , src = , _ jump = _}
75	OPER {assem = movl 108(%ebp), `s0 dst = , src = T448 , _ jump = _}
76	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
77	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
78	OPER {assem = movl `d0, 112(%ebp) dst = T449 , src = , _ jump = _}
79	OPER {assem = pushl `s0
 dst = , src = T449 , _ jump = _}
80	OPER {assem = call _checkNil
 dst = T450 , src = , _ jump = _}
81	OPER {assem = movl 116(%ebp), `s0 dst = , src = T450 , _ jump = _}
82	OPER {assem = addl %esp,$4
 dst = T451 ecx edx , src = , _ jump = _}
83	OPER {assem = movl 120(%ebp), `s0 dst = , src = T451 , _ jump = _}
84	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
85	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
86	OPER {assem = movl `d0, 124(%ebp) dst = T453 , src = , _ jump = _}
87	MOVE {assem = movlE1 `d0,`s0
, dst =T452, src =T453}
88	OPER {assem = movl 124(%ebp), `s0 dst = , src = T452 , _ jump = _}
89	OPER {assem = movl `d0, 128(%ebp) dst = T455 , src = , _ jump = _}
90	OPER {assem = imul `d0,`s0*$4
 dst = T454 , src = T455 , _ jump = _}
91	OPER {assem = movl 128(%ebp), `s0 dst = , src = T454 , _ jump = _}
92	OPER {assem = movl `d0, 132(%ebp) dst = T457 , src = , _ jump = _}
93	OPER {assem = addl `d0,`s0
 dst = T456 , src = T457 , _ jump = _}
94	OPER {assem = movl 132(%ebp), `s0 dst = , src = T456 , _ jump = _}
95	OPER {assem = movl `d0, 136(%ebp) dst = T459 , src = , _ jump = _}
96	OPER {assem = movl `d0,(`s0+0)
 dst = T458 , src = T459 , _ jump = _}
97	OPER {assem = movl 136(%ebp), `s0 dst = , src = T458 , _ jump = _}
98	OPER {assem = movl `d0, 140(%ebp) dst = T461 , src = , _ jump = _}
99	MOVE {assem = movl `d0,`s0
, dst =T460, src =T461}
100	OPER {assem = movl 140(%ebp), `s0 dst = , src = T460 , _ jump = _}
101	OPER {assem = movl `d0, 144(%ebp) dst = T462 , src = , _ jump = _}
102	MOVE {assem = movl `d0,`s0
, dst =T463, src =T462}
103	OPER {assem = movl 144(%ebp), `s0 dst = , src = T463 , _ jump = _}
104	OPER {assem = movl `d0,$1
 dst = T464 , src = , _ jump = _}
105	OPER {assem = movl 148(%ebp), `s0 dst = , src = T464 , _ jump = _}
106	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
107	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
108	OPER {assem = movl `d0, 152(%ebp) dst = T465 , src = , _ jump = _}
109	OPER {assem = pushl `s0
 dst = , src = T465 , _ jump = _}
110	OPER {assem = call _checkNil
 dst = T466 , src = , _ jump = _}
111	OPER {assem = movl 156(%ebp), `s0 dst = , src = T466 , _ jump = _}
112	OPER {assem = addl %esp,$4
 dst = T467 ecx edx , src = , _ jump = _}
113	OPER {assem = movl 160(%ebp), `s0 dst = , src = T467 , _ jump = _}
114	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
115	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
116	OPER {assem = movl `d0, 164(%ebp) dst = T469 , src = , _ jump = _}
117	MOVE {assem = movlE1 `d0,`s0
, dst =T468, src =T469}
118	OPER {assem = movl 164(%ebp), `s0 dst = , src = T468 , _ jump = _}
119	OPER {assem = movl `d0, 168(%ebp) dst = T471 , src = , _ jump = _}
120	OPER {assem = imul `d0,`s0*$4
 dst = T470 , src = T471 , _ jump = _}
121	OPER {assem = movl 168(%ebp), `s0 dst = , src = T470 , _ jump = _}
122	OPER {assem = movl `d0, 172(%ebp) dst = T473 , src = , _ jump = _}
123	OPER {assem = addl `d0,`s0
 dst = T472 , src = T473 , _ jump = _}
124	OPER {assem = movl 172(%ebp), `s0 dst = , src = T472 , _ jump = _}
125	OPER {assem = movl `d0, 176(%ebp) dst = T475 , src = , _ jump = _}
126	OPER {assem = movl `d0,(`s0+0)
 dst = T474 , src = T475 , _ jump = _}
127	OPER {assem = movl 176(%ebp), `s0 dst = , src = T474 , _ jump = _}
128	OPER {assem = movl `d0, 180(%ebp) dst = T476 , src = , _ jump = _}
129	MOVE {assem = movl `d0,`s0
, dst =T477, src =T476}
130	OPER {assem = movl 180(%ebp), `s0 dst = , src = T477 , _ jump = _}
131	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
132	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
133	OPER {assem = movl `d0, 184(%ebp) dst = T478 , src = , _ jump = _}
134	OPER {assem = pushl `s0
 dst = , src = T478 , _ jump = _}
135	OPER {assem = movl `d0, 188(%ebp) dst = T479 , src = , _ jump = _}
136	OPER {assem = pushl `s0
 dst = , src = T479 , _ jump = _}
137	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
138	OPER {assem = call merge_L37
 dst = T480 , src = , _ jump = _}
139	OPER {assem = movl 192(%ebp), `s0 dst = , src = T480 , _ jump = _}
140	OPER {assem = addl %esp,$12
 dst = T481 ecx edx , src = , _ jump = _}
141	OPER {assem = movl 196(%ebp), `s0 dst = , src = T481 , _ jump = _}
142	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
143	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
144	OPER {assem = movl `d0, 200(%ebp) dst = T483 , src = , _ jump = _}
145	MOVE {assem = movl `d0,`s0
, dst =T482, src =T483}
146	OPER {assem = movl 200(%ebp), `s0 dst = , src = T482 , _ jump = _}
147	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
148	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
149	OPER {assem = movl `d0, 204(%ebp) dst = T484 , src = , _ jump = _}
150	OPER {assem = pushl `s0
 dst = , src = T484 , _ jump = _}
151	OPER {assem = movl `d0, 208(%ebp) dst = T485 , src = , _ jump = _}
152	OPER {assem = pushl `s0
 dst = , src = T485 , _ jump = _}
153	OPER {assem = pushl $2
 dst = , src = , _ jump = _}
154	OPER {assem = call _allocRecord
 dst = T486 , src = , _ jump = _}
155	OPER {assem = movl 212(%ebp), `s0 dst = , src = T486 , _ jump = _}
156	OPER {assem = addl %esp,$12
 dst = T487 ecx edx , src = , _ jump = _}
157	OPER {assem = movl 216(%ebp), `s0 dst = , src = T487 , _ jump = _}
158	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
159	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
160	OPER {assem = movl `d0, 220(%ebp) dst = T488 , src = , _ jump = _}
161	MOVE {assem = movl `d0,`s0
, dst =T69, src =T488}
162	LABEL {assem = L52:
 lab = L52}
163	MOVE {assem = movl `d0,`s0
, dst =T71, src =T69}
164	LABEL {assem = L57:
 lab = L57}
165	MOVE {assem = movl `d0,`s0
, dst =T73, src =T71}
166	LABEL {assem = L62:
 lab = L62}
167	MOVE {assem = movl `d0,`s0
, dst =T489, src =T73}
168	OPER {assem = movl 224(%ebp), `s0 dst = , src = T489 , _ jump = _}
169	OPER {assem = jmp L103
 dst = , src = , _ jump = _}
170	LABEL {assem = L60:
 lab = L60}
171	OPER {assem = movl `d0, 228(%ebp) dst = T490 , src = , _ jump = _}
172	MOVE {assem = movl `d0,`s0
, dst =T73, src =T490}
173	OPER {assem = jmp L62
 dst = , src = , _ jump = _}
174	LABEL {assem = L55:
 lab = L55}
175	OPER {assem = movl `d0, 232(%ebp) dst = T491 , src = , _ jump = _}
176	MOVE {assem = movl `d0,`s0
, dst =T71, src =T491}
177	OPER {assem = jmp L57
 dst = , src = , _ jump = _}
178	LABEL {assem = L50:
 lab = L50}
179	OPER {assem = movl `d0, 236(%ebp) dst = T492 , src = , _ jump = _}
180	MOVE {assem = movl `d0,`s0
, dst =T52, src =T492}
181	OPER {assem = movl `d0,$0
 dst = T493 , src = , _ jump = _}
182	OPER {assem = movl 240(%ebp), `s0 dst = , src = T493 , _ jump = _}
183	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
184	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
185	OPER {assem = pushl `s0
 dst = , src = T52 , _ jump = _}
186	OPER {assem = call _checkNil
 dst = T494 , src = , _ jump = _}
187	OPER {assem = movl 244(%ebp), `s0 dst = , src = T494 , _ jump = _}
188	OPER {assem = addl %esp,$4
 dst = T495 ecx edx , src = , _ jump = _}
189	OPER {assem = movl 248(%ebp), `s0 dst = , src = T495 , _ jump = _}
190	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
191	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
192	MOVE {assem = movlE1 `d0,`s0
, dst =T496, src =T52}
193	OPER {assem = movl 252(%ebp), `s0 dst = , src = T496 , _ jump = _}
194	OPER {assem = movl `d0, 256(%ebp) dst = T498 , src = , _ jump = _}
195	OPER {assem = imul `d0,`s0*$4
 dst = T497 , src = T498 , _ jump = _}
196	OPER {assem = movl 256(%ebp), `s0 dst = , src = T497 , _ jump = _}
197	OPER {assem = movl `d0, 260(%ebp) dst = T500 , src = , _ jump = _}
198	OPER {assem = addl `d0,`s0
 dst = T499 , src = T500 , _ jump = _}
199	OPER {assem = movl 260(%ebp), `s0 dst = , src = T499 , _ jump = _}
200	OPER {assem = movl `d0, 264(%ebp) dst = T502 , src = , _ jump = _}
201	OPER {assem = movl `d0,(`s0+0)
 dst = T501 , src = T502 , _ jump = _}
202	OPER {assem = movl 264(%ebp), `s0 dst = , src = T501 , _ jump = _}
203	OPER {assem = movl `d0, 268(%ebp) dst = T504 , src = , _ jump = _}
204	MOVE {assem = movl `d0,`s0
, dst =T503, src =T504}
205	OPER {assem = movl 268(%ebp), `s0 dst = , src = T503 , _ jump = _}
206	OPER {assem = movl `d0, 272(%ebp) dst = T505 , src = , _ jump = _}
207	MOVE {assem = movl `d0,`s0
, dst =T56, src =T505}
208	OPER {assem = movl `d0,$1
 dst = T506 , src = , _ jump = _}
209	OPER {assem = movl 276(%ebp), `s0 dst = , src = T506 , _ jump = _}
210	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
211	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
212	OPER {assem = pushl `s0
 dst = , src = T56 , _ jump = _}
213	OPER {assem = call _checkNil
 dst = T507 , src = , _ jump = _}
214	OPER {assem = movl 280(%ebp), `s0 dst = , src = T507 , _ jump = _}
215	OPER {assem = addl %esp,$4
 dst = T508 ecx edx , src = , _ jump = _}
216	OPER {assem = movl 284(%ebp), `s0 dst = , src = T508 , _ jump = _}
217	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
218	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
219	MOVE {assem = movlE1 `d0,`s0
, dst =T253, src =T56}
220	OPER {assem = movl `d0, 288(%ebp) dst = T510 , src = , _ jump = _}
221	OPER {assem = imul `d0,`s0*$4
 dst = T509 , src = T510 , _ jump = _}
222	OPER {assem = movl 288(%ebp), `s0 dst = , src = T509 , _ jump = _}
223	OPER {assem = movl `d0, 292(%ebp) dst = T511 , src = , _ jump = _}
224	OPER {assem = addl `d0,`s0
 dst = T253 , src = T511 , _ jump = _}
225	OPER {assem = movl `d0,(`s0+0)
 dst = T512 , src = T253 , _ jump = _}
226	OPER {assem = movl 296(%ebp), `s0 dst = , src = T512 , _ jump = _}
227	OPER {assem = movl `d0, 300(%ebp) dst = T513 , src = , _ jump = _}
228	MOVE {assem = movl `d0,`s0
, dst =T514, src =T513}
229	OPER {assem = movl 300(%ebp), `s0 dst = , src = T514 , _ jump = _}
230	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
231	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
232	OPER {assem = movl `d0, 304(%ebp) dst = T515 , src = , _ jump = _}
233	OPER {assem = pushl `s0
 dst = , src = T515 , _ jump = _}
234	OPER {assem = movl `d0, 308(%ebp) dst = T516 , src = , _ jump = _}
235	OPER {assem = pushl `s0
 dst = , src = T516 , _ jump = _}
236	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
237	OPER {assem = call merge_L37
 dst = T517 , src = , _ jump = _}
238	OPER {assem = movl 312(%ebp), `s0 dst = , src = T517 , _ jump = _}
239	OPER {assem = addl %esp,$12
 dst = T518 ecx edx , src = , _ jump = _}
240	OPER {assem = movl 316(%ebp), `s0 dst = , src = T518 , _ jump = _}
241	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
242	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
243	OPER {assem = movl `d0, 320(%ebp) dst = T520 , src = , _ jump = _}
244	MOVE {assem = movl `d0,`s0
, dst =T519, src =T520}
245	OPER {assem = movl 320(%ebp), `s0 dst = , src = T519 , _ jump = _}
246	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
247	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
248	OPER {assem = movl `d0, 324(%ebp) dst = T521 , src = , _ jump = _}
249	OPER {assem = pushl `s0
 dst = , src = T521 , _ jump = _}
250	OPER {assem = movl `d0, 328(%ebp) dst = T522 , src = , _ jump = _}
251	OPER {assem = pushl `s0
 dst = , src = T522 , _ jump = _}
252	OPER {assem = pushl $2
 dst = , src = , _ jump = _}
253	OPER {assem = call _allocRecord
 dst = T523 , src = , _ jump = _}
254	OPER {assem = movl 332(%ebp), `s0 dst = , src = T523 , _ jump = _}
255	OPER {assem = addl %esp,$12
 dst = T524 ecx edx , src = , _ jump = _}
256	OPER {assem = movl 336(%ebp), `s0 dst = , src = T524 , _ jump = _}
257	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
258	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
259	OPER {assem = movl `d0, 340(%ebp) dst = T525 , src = , _ jump = _}
260	MOVE {assem = movl `d0,`s0
, dst =T69, src =T525}
261	OPER {assem = jmp L52
 dst = , src = , _ jump = _}
262	LABEL {assem = L103:
 lab = L103}

MOVE {assem = movl `d0,`s0
, dst =T415, src =T414}
A workListMoves -> T414 T415
MOVE {assem = movlE1 `d0,`s0
, dst =T420, src =T421}
A workListMoves -> T421 T420
MOVE {assem = movl `d0,`s0
, dst =T428, src =T429}
A workListMoves -> T429 T428
MOVE {assem = movl `d0,`s0
, dst =T431, src =T430}
A workListMoves -> T430 T431
MOVE {assem = movlE1 `d0,`s0
, dst =T436, src =T437}
A workListMoves -> T437 T436
MOVE {assem = movl `d0,`s0
, dst =T447, src =T446}
A workListMoves -> T446 T447
MOVE {assem = movlE1 `d0,`s0
, dst =T452, src =T453}
A workListMoves -> T453 T452
MOVE {assem = movl `d0,`s0
, dst =T460, src =T461}
A workListMoves -> T461 T460
MOVE {assem = movl `d0,`s0
, dst =T463, src =T462}
A workListMoves -> T462 T463
MOVE {assem = movlE1 `d0,`s0
, dst =T468, src =T469}
A workListMoves -> T469 T468
MOVE {assem = movl `d0,`s0
, dst =T477, src =T476}
A workListMoves -> T476 T477
MOVE {assem = movl `d0,`s0
, dst =T482, src =T483}
A workListMoves -> T483 T482
MOVE {assem = movl `d0,`s0
, dst =T69, src =T488}
A workListMoves -> T488 T69
MOVE {assem = movl `d0,`s0
, dst =T71, src =T69}
A workListMoves -> T69 T71
MOVE {assem = movl `d0,`s0
, dst =T73, src =T71}
A workListMoves -> T71 T73
MOVE {assem = movl `d0,`s0
, dst =T489, src =T73}
A workListMoves -> T73 T489
MOVE {assem = movl `d0,`s0
, dst =T73, src =T490}
A workListMoves -> T490 T73
MOVE {assem = movl `d0,`s0
, dst =T71, src =T491}
A workListMoves -> T491 T71
MOVE {assem = movl `d0,`s0
, dst =T52, src =T492}
A workListMoves -> T492 T52
MOVE {assem = movlE1 `d0,`s0
, dst =T496, src =T52}
A workListMoves -> T52 T496
MOVE {assem = movl `d0,`s0
, dst =T503, src =T504}
A workListMoves -> T504 T503
MOVE {assem = movl `d0,`s0
, dst =T56, src =T505}
A workListMoves -> T505 T56
MOVE {assem = movlE1 `d0,`s0
, dst =T253, src =T56}
A workListMoves -> T56 T253
MOVE {assem = movl `d0,`s0
, dst =T514, src =T513}
A workListMoves -> T513 T514
MOVE {assem = movl `d0,`s0
, dst =T519, src =T520}
A workListMoves -> T520 T519
MOVE {assem = movl `d0,`s0
, dst =T69, src =T525}
A workListMoves -> T525 T69
JAMON EN coalesce
Coalesce 1 T414 T415
Coalesce 2
Coalesce 3
Coalesce 1 T421 T420
Coalesce 2
Coalesce 3
Coalesce 1 T429 T428
Coalesce 2
Coalesce 3
Coalesce 1 T430 T431
Coalesce 2
Coalesce 3
Coalesce 1 T437 T436
Coalesce 2
Coalesce 3
Coalesce 1 T446 T447
Coalesce 2
Coalesce 3
Coalesce 1 T453 T452
Coalesce 2
Coalesce 3
Coalesce 1 T461 T460
Coalesce 2
Coalesce 3
Coalesce 1 T462 T463
Coalesce 2
Coalesce 3
Coalesce 1 T469 T468
Coalesce 2
Coalesce 3
Coalesce 1 T476 T477
Coalesce 2
Coalesce 3
Coalesce 1 T483 T482
Coalesce 2
Coalesce 3
Coalesce 1 T488 T69
Coalesce 2
Coalesce 3
Coalesce 1 T490 T73
Coalesce 2
Coalesce 3
Coalesce 1 T491 T71
Coalesce 2
Coalesce 3
Coalesce 1 T492 T52
Coalesce 2
Coalesce 3
Coalesce 1 T504 T503
Coalesce 2
Coalesce 3
Coalesce 1 T505 T56
Coalesce 2
Coalesce 3
Coalesce 1 T513 T514
Coalesce 2
Coalesce 3
Coalesce 1 T52 T496
Coalesce 2
Coalesce 3
Coalesce 1 T520 T519
Coalesce 2
Coalesce 3
Coalesce 1 T525 T69
Coalesce 2
Coalesce 3
Coalesce 1 T56 T253
Coalesce 2
Coalesce 3
Coalesce 1 T69 T71
Coalesce 2
Coalesce 3
Coalesce 1 T71 T73
Coalesce 2
Coalesce 3
Coalesce 1 T73 T489
Coalesce 2
Coalesce 3
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
~~~~~~~~~~> T253 esi
~~~~~~~~~~> T52 edi
~~~~~~~~~~> T56 edx
~~~~~~~~~~> T69 ecx
~~~~~~~~~~> T71 ebx
~~~~~~~~~~> T73 eax
CODIGO: 
0	LABEL {assem = f_L63:
 lab = f_L63}
1	OPER {assem = cmpl `s0,$0
 dst = , src = T75 , _ jump = _}
2	OPER {assem = jg L74
 dst = , src = , _ jump = _}
3	LABEL {assem = L75:
 lab = L75}
4	OPER {assem = jmp L104
 dst = , src = , _ jump = _}
5	LABEL {assem = L74:
 lab = L74}
6	MOVE {assem = movl `d0,`s0
, dst =eax, src =T75}
7	OPER {assem = CWQ
 dst = edx , src = eax , _ jump = _}
8	OPER {assem = movl `d0,$10
 dst = T256 , src = , _ jump = _}
9	OPER {assem = idiv `s0
 dst = eax edx , src = T256 , _ jump = _}
10	MOVE {assem = movl `d0,`s0
, dst =T256, src =eax}
11	MOVE {assem = movl `d0,`s0
, dst =T79, src =T256}
12	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
13	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
14	OPER {assem = pushl `s0
 dst = , src = T79 , _ jump = _}
15	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
16	OPER {assem = call f_L63
 dst = eax , src = , _ jump = _}
17	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
18	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
19	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
20	MOVE {assem = movl `d0,`s0
, dst =T257, src =T75}
21	MOVE {assem = movl `d0,`s0
, dst =eax, src =T75}
22	OPER {assem = CWQ
 dst = edx , src = eax , _ jump = _}
23	OPER {assem = movl `d0,$10
 dst = T259 , src = , _ jump = _}
24	OPER {assem = idiv `s0
 dst = eax edx , src = T259 , _ jump = _}
25	MOVE {assem = movl `d0,`s0
, dst =T259, src =eax}
26	OPER {assem = imul `d0,`s0*$10
 dst = T258 , src = T259 , _ jump = _}
27	OPER {assem = subl `d0,`s0
 dst = T257 , src = T258 , _ jump = _}
28	MOVE {assem = movl `d0,`s0
, dst =T141, src =T257}
29	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
30	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
31	OPER {assem = pushl L73
 dst = , src = , _ jump = _}
32	OPER {assem = call ord
 dst = eax , src = , _ jump = _}
33	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
34	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
35	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
36	MOVE {assem = movl `d0,`s0
, dst =T100, src =eax}
37	MOVE {assem = movlE1 `d0,`s0
, dst =T260, src =T141}
38	OPER {assem = addl `d0,`s0
 dst = T260 , src = T100 , _ jump = _}
39	MOVE {assem = movl `d0,`s0
, dst =T102, src =T260}
40	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
41	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
42	OPER {assem = pushl `s0
 dst = , src = T102 , _ jump = _}
43	OPER {assem = call chr
 dst = eax , src = , _ jump = _}
44	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
45	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
46	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
47	MOVE {assem = movl `d0,`s0
, dst =T103, src =eax}
48	MOVE {assem = movl `d0,`s0
, dst =T104, src =T103}
49	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
50	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
51	OPER {assem = pushl `s0
 dst = , src = T104 , _ jump = _}
52	OPER {assem = call print
 dst = eax , src = , _ jump = _}
53	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
54	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
55	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
56	OPER {assem = jmp L75
 dst = , src = , _ jump = _}
57	LABEL {assem = L104:
 lab = L104}

MOVE {assem = movl `d0,`s0
, dst =eax, src =T75}
A workListMoves -> T75 eax
MOVE {assem = movl `d0,`s0
, dst =T256, src =eax}
A workListMoves -> eax T256
MOVE {assem = movl `d0,`s0
, dst =T79, src =T256}
A workListMoves -> T256 T79
MOVE {assem = movl `d0,`s0
, dst =T257, src =T75}
A workListMoves -> T75 T257
MOVE {assem = movl `d0,`s0
, dst =eax, src =T75}
A workListMoves -> T75 eax
MOVE {assem = movl `d0,`s0
, dst =T259, src =eax}
A workListMoves -> eax T259
MOVE {assem = movl `d0,`s0
, dst =T141, src =T257}
A workListMoves -> T257 T141
MOVE {assem = movl `d0,`s0
, dst =T100, src =eax}
A workListMoves -> eax T100
MOVE {assem = movlE1 `d0,`s0
, dst =T260, src =T141}
A workListMoves -> T141 T260
MOVE {assem = movl `d0,`s0
, dst =T102, src =T260}
A workListMoves -> T260 T102
MOVE {assem = movl `d0,`s0
, dst =T103, src =eax}
A workListMoves -> eax T103
MOVE {assem = movl `d0,`s0
, dst =T104, src =T103}
A workListMoves -> T103 T104
JAMON EN coalesce
Coalesce 1 T103 T104
Coalesce 2
Coalesce 3
Coalesce 1 T141 T260
Coalesce 2
Coalesce 3
Coalesce 1 T256 T79
Coalesce 2
Coalesce 3
Coalesce 1 T257 T141
Coalesce 2
Coalesce 3
Coalesce 1 T260 T102
Coalesce 2
Coalesce 3
Coalesce 1 T75 T257
Coalesce 2
Coalesce 3
Coalesce 1 T75 eax
Coalesce 2
Coalesce 3
Coalesce 1 eax T100
Coalesce 2
Coalesce 3
Coalesce 1 eax T103
Coalesce 2
Coalesce 3
Coalesce 1 eax T256
Coalesce 2
Coalesce 3
Coalesce 1 eax T259
Coalesce 2
Coalesce 3
JAMON EN coalesce
Coalesce 1 T75 T257
Coalesce 2
Coalesce 3
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
CODIGO: 
0	LABEL {assem = f_L63:
 lab = f_L63}
1	OPER {assem = cmpl `s0,$0
 dst = , src = T75 , _ jump = _}
2	OPER {assem = jg L74
 dst = , src = , _ jump = _}
3	LABEL {assem = L75:
 lab = L75}
4	OPER {assem = jmp L104
 dst = , src = , _ jump = _}
5	LABEL {assem = L74:
 lab = L74}
6	MOVE {assem = movl `d0,`s0
, dst =T526, src =T75}
7	OPER {assem = movl 16(%ebp), `s0 dst = , src = T526 , _ jump = _}
8	OPER {assem = movl `d0, 20(%ebp) dst = T527 , src = , _ jump = _}
9	OPER {assem = CWQ
 dst = edx , src = T527 , _ jump = _}
10	OPER {assem = movl `d0,$10
 dst = T256 , src = , _ jump = _}
11	OPER {assem = idiv `s0
 dst = T528 edx , src = T256 , _ jump = _}
12	OPER {assem = movl 24(%ebp), `s0 dst = , src = T528 , _ jump = _}
13	OPER {assem = movl `d0, 28(%ebp) dst = T529 , src = , _ jump = _}
14	MOVE {assem = movl `d0,`s0
, dst =T256, src =T529}
15	MOVE {assem = movl `d0,`s0
, dst =T79, src =T256}
16	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
17	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
18	OPER {assem = pushl `s0
 dst = , src = T79 , _ jump = _}
19	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
20	OPER {assem = call f_L63
 dst = T530 , src = , _ jump = _}
21	OPER {assem = movl 32(%ebp), `s0 dst = , src = T530 , _ jump = _}
22	OPER {assem = addl %esp,$8
 dst = T531 ecx edx , src = , _ jump = _}
23	OPER {assem = movl 36(%ebp), `s0 dst = , src = T531 , _ jump = _}
24	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
25	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
26	MOVE {assem = movl `d0,`s0
, dst =T257, src =T75}
27	MOVE {assem = movl `d0,`s0
, dst =T532, src =T75}
28	OPER {assem = movl 40(%ebp), `s0 dst = , src = T532 , _ jump = _}
29	OPER {assem = movl `d0, 44(%ebp) dst = T533 , src = , _ jump = _}
30	OPER {assem = CWQ
 dst = edx , src = T533 , _ jump = _}
31	OPER {assem = movl `d0,$10
 dst = T259 , src = , _ jump = _}
32	OPER {assem = idiv `s0
 dst = T534 edx , src = T259 , _ jump = _}
33	OPER {assem = movl 48(%ebp), `s0 dst = , src = T534 , _ jump = _}
34	OPER {assem = movl `d0, 52(%ebp) dst = T535 , src = , _ jump = _}
35	MOVE {assem = movl `d0,`s0
, dst =T259, src =T535}
36	OPER {assem = imul `d0,`s0*$10
 dst = T258 , src = T259 , _ jump = _}
37	OPER {assem = subl `d0,`s0
 dst = T257 , src = T258 , _ jump = _}
38	MOVE {assem = movl `d0,`s0
, dst =T536, src =T257}
39	OPER {assem = movl 56(%ebp), `s0 dst = , src = T536 , _ jump = _}
40	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
41	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
42	OPER {assem = pushl L73
 dst = , src = , _ jump = _}
43	OPER {assem = call ord
 dst = T537 , src = , _ jump = _}
44	OPER {assem = movl 60(%ebp), `s0 dst = , src = T537 , _ jump = _}
45	OPER {assem = addl %esp,$4
 dst = T538 ecx edx , src = , _ jump = _}
46	OPER {assem = movl 64(%ebp), `s0 dst = , src = T538 , _ jump = _}
47	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
48	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
49	OPER {assem = movl `d0, 68(%ebp) dst = T540 , src = , _ jump = _}
50	MOVE {assem = movl `d0,`s0
, dst =T539, src =T540}
51	OPER {assem = movl 68(%ebp), `s0 dst = , src = T539 , _ jump = _}
52	OPER {assem = movl `d0, 72(%ebp) dst = T541 , src = , _ jump = _}
53	MOVE {assem = movlE1 `d0,`s0
, dst =T260, src =T541}
54	OPER {assem = movl `d0, 76(%ebp) dst = T542 , src = , _ jump = _}
55	OPER {assem = addl `d0,`s0
 dst = T260 , src = T542 , _ jump = _}
56	MOVE {assem = movl `d0,`s0
, dst =T543, src =T260}
57	OPER {assem = movl 80(%ebp), `s0 dst = , src = T543 , _ jump = _}
58	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
59	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
60	OPER {assem = movl `d0, 84(%ebp) dst = T544 , src = , _ jump = _}
61	OPER {assem = pushl `s0
 dst = , src = T544 , _ jump = _}
62	OPER {assem = call chr
 dst = T545 , src = , _ jump = _}
63	OPER {assem = movl 88(%ebp), `s0 dst = , src = T545 , _ jump = _}
64	OPER {assem = addl %esp,$4
 dst = T546 ecx edx , src = , _ jump = _}
65	OPER {assem = movl 92(%ebp), `s0 dst = , src = T546 , _ jump = _}
66	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
67	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
68	OPER {assem = movl `d0, 96(%ebp) dst = T548 , src = , _ jump = _}
69	MOVE {assem = movl `d0,`s0
, dst =T547, src =T548}
70	OPER {assem = movl 96(%ebp), `s0 dst = , src = T547 , _ jump = _}
71	OPER {assem = movl `d0, 100(%ebp) dst = T549 , src = , _ jump = _}
72	MOVE {assem = movl `d0,`s0
, dst =T550, src =T549}
73	OPER {assem = movl 100(%ebp), `s0 dst = , src = T550 , _ jump = _}
74	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
75	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
76	OPER {assem = movl `d0, 104(%ebp) dst = T551 , src = , _ jump = _}
77	OPER {assem = pushl `s0
 dst = , src = T551 , _ jump = _}
78	OPER {assem = call print
 dst = T552 , src = , _ jump = _}
79	OPER {assem = movl 108(%ebp), `s0 dst = , src = T552 , _ jump = _}
80	OPER {assem = addl %esp,$4
 dst = T553 ecx edx , src = , _ jump = _}
81	OPER {assem = movl 112(%ebp), `s0 dst = , src = T553 , _ jump = _}
82	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
83	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
84	OPER {assem = jmp L75
 dst = , src = , _ jump = _}
85	LABEL {assem = L104:
 lab = L104}

MOVE {assem = movl `d0,`s0
, dst =T526, src =T75}
A workListMoves -> T75 T526
MOVE {assem = movl `d0,`s0
, dst =T256, src =T529}
A workListMoves -> T529 T256
MOVE {assem = movl `d0,`s0
, dst =T79, src =T256}
A workListMoves -> T256 T79
MOVE {assem = movl `d0,`s0
, dst =T257, src =T75}
A workListMoves -> T75 T257
MOVE {assem = movl `d0,`s0
, dst =T532, src =T75}
A workListMoves -> T75 T532
MOVE {assem = movl `d0,`s0
, dst =T259, src =T535}
A workListMoves -> T535 T259
MOVE {assem = movl `d0,`s0
, dst =T536, src =T257}
A workListMoves -> T257 T536
MOVE {assem = movl `d0,`s0
, dst =T539, src =T540}
A workListMoves -> T540 T539
MOVE {assem = movlE1 `d0,`s0
, dst =T260, src =T541}
A workListMoves -> T541 T260
MOVE {assem = movl `d0,`s0
, dst =T543, src =T260}
A workListMoves -> T260 T543
MOVE {assem = movl `d0,`s0
, dst =T547, src =T548}
A workListMoves -> T548 T547
MOVE {assem = movl `d0,`s0
, dst =T550, src =T549}
A workListMoves -> T549 T550
JAMON EN coalesce
Coalesce 1 T256 T79
Coalesce 2
Coalesce 3
Coalesce 1 T257 T536
Coalesce 2
Coalesce 3
Coalesce 1 T260 T543
Coalesce 2
Coalesce 3
Coalesce 1 T529 T256
Coalesce 2
Coalesce 3
Coalesce 1 T535 T259
Coalesce 2
Coalesce 3
Coalesce 1 T540 T539
Coalesce 2
Coalesce 3
Coalesce 1 T541 T260
Coalesce 2
Coalesce 3
Coalesce 1 T548 T547
Coalesce 2
Coalesce 3
Coalesce 1 T549 T550
Coalesce 2
Coalesce 3
Coalesce 1 T75 T257
Coalesce 2
Coalesce 3
Coalesce 1 T75 T526
Coalesce 2
Coalesce 3
Coalesce 1 T75 T532
Coalesce 2
Coalesce 3
JAMON EN freeze
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
CODIGO: 
0	LABEL {assem = f_L63:
 lab = f_L63}
1	OPER {assem = movl `d0, 116(%ebp) dst = T554 , src = , _ jump = _}
2	OPER {assem = cmpl `s0,$0
 dst = , src = T554 , _ jump = _}
3	OPER {assem = jg L74
 dst = , src = , _ jump = _}
4	LABEL {assem = L75:
 lab = L75}
5	OPER {assem = jmp L104
 dst = , src = , _ jump = _}
6	LABEL {assem = L74:
 lab = L74}
7	OPER {assem = movl `d0, 120(%ebp) dst = T555 , src = , _ jump = _}
8	MOVE {assem = movl `d0,`s0
, dst =T526, src =T555}
9	OPER {assem = movl 16(%ebp), `s0 dst = , src = T526 , _ jump = _}
10	OPER {assem = movl `d0, 20(%ebp) dst = T527 , src = , _ jump = _}
11	OPER {assem = CWQ
 dst = edx , src = T527 , _ jump = _}
12	OPER {assem = movl `d0,$10
 dst = T256 , src = , _ jump = _}
13	OPER {assem = idiv `s0
 dst = T528 edx , src = T256 , _ jump = _}
14	OPER {assem = movl 24(%ebp), `s0 dst = , src = T528 , _ jump = _}
15	OPER {assem = movl `d0, 28(%ebp) dst = T529 , src = , _ jump = _}
16	MOVE {assem = movl `d0,`s0
, dst =T256, src =T529}
17	MOVE {assem = movl `d0,`s0
, dst =T79, src =T256}
18	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
19	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
20	OPER {assem = pushl `s0
 dst = , src = T79 , _ jump = _}
21	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
22	OPER {assem = call f_L63
 dst = T530 , src = , _ jump = _}
23	OPER {assem = movl 32(%ebp), `s0 dst = , src = T530 , _ jump = _}
24	OPER {assem = addl %esp,$8
 dst = T531 ecx edx , src = , _ jump = _}
25	OPER {assem = movl 36(%ebp), `s0 dst = , src = T531 , _ jump = _}
26	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
27	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
28	OPER {assem = movl `d0, 124(%ebp) dst = T556 , src = , _ jump = _}
29	MOVE {assem = movl `d0,`s0
, dst =T257, src =T556}
30	OPER {assem = movl `d0, 128(%ebp) dst = T557 , src = , _ jump = _}
31	MOVE {assem = movl `d0,`s0
, dst =T532, src =T557}
32	OPER {assem = movl 40(%ebp), `s0 dst = , src = T532 , _ jump = _}
33	OPER {assem = movl `d0, 44(%ebp) dst = T533 , src = , _ jump = _}
34	OPER {assem = CWQ
 dst = edx , src = T533 , _ jump = _}
35	OPER {assem = movl `d0,$10
 dst = T259 , src = , _ jump = _}
36	OPER {assem = idiv `s0
 dst = T534 edx , src = T259 , _ jump = _}
37	OPER {assem = movl 48(%ebp), `s0 dst = , src = T534 , _ jump = _}
38	OPER {assem = movl `d0, 52(%ebp) dst = T535 , src = , _ jump = _}
39	MOVE {assem = movl `d0,`s0
, dst =T259, src =T535}
40	OPER {assem = imul `d0,`s0*$10
 dst = T258 , src = T259 , _ jump = _}
41	OPER {assem = subl `d0,`s0
 dst = T257 , src = T258 , _ jump = _}
42	MOVE {assem = movl `d0,`s0
, dst =T536, src =T257}
43	OPER {assem = movl 56(%ebp), `s0 dst = , src = T536 , _ jump = _}
44	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
45	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
46	OPER {assem = pushl L73
 dst = , src = , _ jump = _}
47	OPER {assem = call ord
 dst = T537 , src = , _ jump = _}
48	OPER {assem = movl 60(%ebp), `s0 dst = , src = T537 , _ jump = _}
49	OPER {assem = addl %esp,$4
 dst = T538 ecx edx , src = , _ jump = _}
50	OPER {assem = movl 64(%ebp), `s0 dst = , src = T538 , _ jump = _}
51	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
52	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
53	OPER {assem = movl `d0, 68(%ebp) dst = T540 , src = , _ jump = _}
54	MOVE {assem = movl `d0,`s0
, dst =T539, src =T540}
55	OPER {assem = movl 68(%ebp), `s0 dst = , src = T539 , _ jump = _}
56	OPER {assem = movl `d0, 72(%ebp) dst = T541 , src = , _ jump = _}
57	MOVE {assem = movlE1 `d0,`s0
, dst =T260, src =T541}
58	OPER {assem = movl `d0, 76(%ebp) dst = T542 , src = , _ jump = _}
59	OPER {assem = addl `d0,`s0
 dst = T260 , src = T542 , _ jump = _}
60	MOVE {assem = movl `d0,`s0
, dst =T543, src =T260}
61	OPER {assem = movl 80(%ebp), `s0 dst = , src = T543 , _ jump = _}
62	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
63	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
64	OPER {assem = movl `d0, 84(%ebp) dst = T544 , src = , _ jump = _}
65	OPER {assem = pushl `s0
 dst = , src = T544 , _ jump = _}
66	OPER {assem = call chr
 dst = T545 , src = , _ jump = _}
67	OPER {assem = movl 88(%ebp), `s0 dst = , src = T545 , _ jump = _}
68	OPER {assem = addl %esp,$4
 dst = T546 ecx edx , src = , _ jump = _}
69	OPER {assem = movl 92(%ebp), `s0 dst = , src = T546 , _ jump = _}
70	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
71	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
72	OPER {assem = movl `d0, 96(%ebp) dst = T548 , src = , _ jump = _}
73	MOVE {assem = movl `d0,`s0
, dst =T547, src =T548}
74	OPER {assem = movl 96(%ebp), `s0 dst = , src = T547 , _ jump = _}
75	OPER {assem = movl `d0, 100(%ebp) dst = T549 , src = , _ jump = _}
76	MOVE {assem = movl `d0,`s0
, dst =T550, src =T549}
77	OPER {assem = movl 100(%ebp), `s0 dst = , src = T550 , _ jump = _}
78	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
79	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
80	OPER {assem = movl `d0, 104(%ebp) dst = T551 , src = , _ jump = _}
81	OPER {assem = pushl `s0
 dst = , src = T551 , _ jump = _}
82	OPER {assem = call print
 dst = T552 , src = , _ jump = _}
83	OPER {assem = movl 108(%ebp), `s0 dst = , src = T552 , _ jump = _}
84	OPER {assem = addl %esp,$4
 dst = T553 ecx edx , src = , _ jump = _}
85	OPER {assem = movl 112(%ebp), `s0 dst = , src = T553 , _ jump = _}
86	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
87	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
88	OPER {assem = jmp L75
 dst = , src = , _ jump = _}
89	LABEL {assem = L104:
 lab = L104}

MOVE {assem = movl `d0,`s0
, dst =T526, src =T555}
A workListMoves -> T555 T526
MOVE {assem = movl `d0,`s0
, dst =T256, src =T529}
A workListMoves -> T529 T256
MOVE {assem = movl `d0,`s0
, dst =T79, src =T256}
A workListMoves -> T256 T79
MOVE {assem = movl `d0,`s0
, dst =T257, src =T556}
A workListMoves -> T556 T257
MOVE {assem = movl `d0,`s0
, dst =T532, src =T557}
A workListMoves -> T557 T532
MOVE {assem = movl `d0,`s0
, dst =T259, src =T535}
A workListMoves -> T535 T259
MOVE {assem = movl `d0,`s0
, dst =T536, src =T257}
A workListMoves -> T257 T536
MOVE {assem = movl `d0,`s0
, dst =T539, src =T540}
A workListMoves -> T540 T539
MOVE {assem = movlE1 `d0,`s0
, dst =T260, src =T541}
A workListMoves -> T541 T260
MOVE {assem = movl `d0,`s0
, dst =T543, src =T260}
A workListMoves -> T260 T543
MOVE {assem = movl `d0,`s0
, dst =T547, src =T548}
A workListMoves -> T548 T547
MOVE {assem = movl `d0,`s0
, dst =T550, src =T549}
A workListMoves -> T549 T550
JAMON EN coalesce
Coalesce 1 T256 T79
Coalesce 2
Coalesce 3
Coalesce 1 T257 T536
Coalesce 2
Coalesce 3
Coalesce 1 T260 T543
Coalesce 2
Coalesce 3
Coalesce 1 T529 T256
Coalesce 2
Coalesce 3
Coalesce 1 T535 T259
Coalesce 2
Coalesce 3
Coalesce 1 T540 T539
Coalesce 2
Coalesce 3
Coalesce 1 T541 T260
Coalesce 2
Coalesce 3
Coalesce 1 T548 T547
Coalesce 2
Coalesce 3
Coalesce 1 T549 T550
Coalesce 2
Coalesce 3
Coalesce 1 T555 T526
Coalesce 2
Coalesce 3
Coalesce 1 T556 T257
Coalesce 2
Coalesce 3
Coalesce 1 T557 T532
Coalesce 2
Coalesce 3
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
~~~~~~~~~~> T256 ebx
~~~~~~~~~~> T257 edx
~~~~~~~~~~> T258 esi
~~~~~~~~~~> T259 eax
~~~~~~~~~~> T260 ecx
~~~~~~~~~~> T79 edi
CODIGO: 
0	LABEL {assem = printint_L36:
 lab = printint_L36}
1	OPER {assem = cmpl `s0,$0
 dst = , src = T74 , _ jump = _}
2	OPER {assem = jl L87
 dst = , src = , _ jump = _}
3	LABEL {assem = L88:
 lab = L88}
4	OPER {assem = cmpl `s0,$0
 dst = , src = T74 , _ jump = _}
5	OPER {assem = jg L84
 dst = , src = , _ jump = _}
6	LABEL {assem = L85:
 lab = L85}
7	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
8	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
9	OPER {assem = pushl L83
 dst = , src = , _ jump = _}
10	OPER {assem = call print
 dst = eax , src = , _ jump = _}
11	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
12	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
13	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
14	LABEL {assem = L86:
 lab = L86}
15	LABEL {assem = L89:
 lab = L89}
16	OPER {assem = jmp L105
 dst = , src = , _ jump = _}
17	LABEL {assem = L87:
 lab = L87}
18	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
19	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
20	OPER {assem = pushl L79
 dst = , src = , _ jump = _}
21	OPER {assem = call print
 dst = eax , src = , _ jump = _}
22	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
23	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
24	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
25	OPER {assem = movl `d0, $0
 dst = T261 , src = , _ jump = _}
26	OPER {assem = subl `d0,`s0
 dst = T261 , src = T74 , _ jump = _}
27	MOVE {assem = movl `d0,`s0
, dst =T108, src =T261}
28	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
29	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
30	OPER {assem = pushl `s0
 dst = , src = T108 , _ jump = _}
31	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
32	OPER {assem = call f_L63
 dst = eax , src = , _ jump = _}
33	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
34	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
35	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
36	OPER {assem = jmp L89
 dst = , src = , _ jump = _}
37	LABEL {assem = L84:
 lab = L84}
38	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
39	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
40	OPER {assem = pushl `s0
 dst = , src = T74 , _ jump = _}
41	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
42	OPER {assem = call f_L63
 dst = eax , src = , _ jump = _}
43	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
44	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
45	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
46	OPER {assem = jmp L86
 dst = , src = , _ jump = _}
47	LABEL {assem = L105:
 lab = L105}

MOVE {assem = movl `d0,`s0
, dst =T108, src =T261}
A workListMoves -> T261 T108
JAMON EN simplify
JAMON EN coalesce
Coalesce 1 T261 T108
Coalesce 2
Coalesce 3
JAMON EN freeze
JAMON EN simplify
JAMON EN simplify
~~~~~~~~~~> T108 ebx
~~~~~~~~~~> T261 eax
~~~~~~~~~~> T74 ecx
CODIGO: 
0	LABEL {assem = printlist_L35:
 lab = printlist_L35}
1	OPER {assem = cmpl `s0,$0
 dst = , src = T110 , _ jump = _}
2	OPER {assem = je L96
 dst = , src = , _ jump = _}
3	LABEL {assem = L97:
 lab = L97}
4	MOVE {assem = movl `d0,`s0
, dst =T114, src =T110}
5	OPER {assem = movl `d0,$0
 dst = T115 , src = , _ jump = _}
6	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
7	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
8	OPER {assem = pushl `s0
 dst = , src = T114 , _ jump = _}
9	OPER {assem = call _checkNil
 dst = eax , src = , _ jump = _}
10	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
11	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
12	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
13	MOVE {assem = movlE1 `d0,`s0
, dst =T263, src =T114}
14	OPER {assem = imul `d0,`s0*$4
 dst = T264 , src = T115 , _ jump = _}
15	OPER {assem = addl `d0,`s0
 dst = T263 , src = T264 , _ jump = _}
16	OPER {assem = movl `d0,(`s0+0)
 dst = T262 , src = T263 , _ jump = _}
17	MOVE {assem = movl `d0,`s0
, dst =T116, src =T262}
18	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
19	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
20	OPER {assem = pushl `s0
 dst = , src = T116 , _ jump = _}
21	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
22	OPER {assem = call printint_L36
 dst = eax , src = , _ jump = _}
23	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
24	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
25	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
26	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
27	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
28	OPER {assem = pushl L95
 dst = , src = , _ jump = _}
29	OPER {assem = call print
 dst = eax , src = , _ jump = _}
30	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
31	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
32	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
33	MOVE {assem = movl `d0,`s0
, dst =T119, src =T110}
34	OPER {assem = movl `d0,$1
 dst = T120 , src = , _ jump = _}
35	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
36	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
37	OPER {assem = pushl `s0
 dst = , src = T119 , _ jump = _}
38	OPER {assem = call _checkNil
 dst = eax , src = , _ jump = _}
39	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
40	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
41	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
42	MOVE {assem = movlE1 `d0,`s0
, dst =T266, src =T119}
43	OPER {assem = imul `d0,`s0*$4
 dst = T267 , src = T120 , _ jump = _}
44	OPER {assem = addl `d0,`s0
 dst = T266 , src = T267 , _ jump = _}
45	OPER {assem = movl `d0,(`s0+0)
 dst = T265 , src = T266 , _ jump = _}
46	MOVE {assem = movl `d0,`s0
, dst =T121, src =T265}
47	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
48	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
49	OPER {assem = pushl `s0
 dst = , src = T121 , _ jump = _}
50	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
51	OPER {assem = call printlist_L35
 dst = eax , src = , _ jump = _}
52	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
53	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
54	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
55	LABEL {assem = L98:
 lab = L98}
56	OPER {assem = jmp L106
 dst = , src = , _ jump = _}
57	LABEL {assem = L96:
 lab = L96}
58	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
59	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
60	OPER {assem = pushl L93
 dst = , src = , _ jump = _}
61	OPER {assem = call print
 dst = eax , src = , _ jump = _}
62	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
63	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
64	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
65	OPER {assem = jmp L98
 dst = , src = , _ jump = _}
66	LABEL {assem = L106:
 lab = L106}

MOVE {assem = movl `d0,`s0
, dst =T114, src =T110}
A workListMoves -> T110 T114
MOVE {assem = movlE1 `d0,`s0
, dst =T263, src =T114}
A workListMoves -> T114 T263
MOVE {assem = movl `d0,`s0
, dst =T116, src =T262}
A workListMoves -> T262 T116
MOVE {assem = movl `d0,`s0
, dst =T119, src =T110}
A workListMoves -> T110 T119
MOVE {assem = movlE1 `d0,`s0
, dst =T266, src =T119}
A workListMoves -> T119 T266
MOVE {assem = movl `d0,`s0
, dst =T121, src =T265}
A workListMoves -> T265 T121
JAMON EN coalesce
Coalesce 1 T110 T114
Coalesce 2
Coalesce 3
Coalesce 1 T110 T119
Coalesce 2
Coalesce 3
Coalesce 1 T114 T263
Coalesce 2
Coalesce 3
Coalesce 1 T119 T266
Coalesce 2
Coalesce 3
Coalesce 1 T262 T116
Coalesce 2
Coalesce 3
Coalesce 1 T265 T121
Coalesce 2
Coalesce 3
JAMON EN freeze
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
CODIGO: 
0	LABEL {assem = printlist_L35:
 lab = printlist_L35}
1	OPER {assem = movl `d0, 16(%ebp) dst = T558 , src = , _ jump = _}
2	OPER {assem = cmpl `s0,$0
 dst = , src = T558 , _ jump = _}
3	OPER {assem = je L96
 dst = , src = , _ jump = _}
4	LABEL {assem = L97:
 lab = L97}
5	OPER {assem = movl `d0, 20(%ebp) dst = T559 , src = , _ jump = _}
6	MOVE {assem = movl `d0,`s0
, dst =T114, src =T559}
7	OPER {assem = movl `d0,$0
 dst = T560 , src = , _ jump = _}
8	OPER {assem = movl 24(%ebp), `s0 dst = , src = T560 , _ jump = _}
9	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
10	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
11	OPER {assem = pushl `s0
 dst = , src = T114 , _ jump = _}
12	OPER {assem = call _checkNil
 dst = eax , src = , _ jump = _}
13	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
14	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
15	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
16	MOVE {assem = movlE1 `d0,`s0
, dst =T263, src =T114}
17	OPER {assem = movl `d0, 28(%ebp) dst = T561 , src = , _ jump = _}
18	OPER {assem = imul `d0,`s0*$4
 dst = T562 , src = T561 , _ jump = _}
19	OPER {assem = movl 28(%ebp), `s0 dst = , src = T562 , _ jump = _}
20	OPER {assem = movl `d0, 32(%ebp) dst = T563 , src = , _ jump = _}
21	OPER {assem = addl `d0,`s0
 dst = T263 , src = T563 , _ jump = _}
22	OPER {assem = movl `d0,(`s0+0)
 dst = T564 , src = T263 , _ jump = _}
23	OPER {assem = movl 36(%ebp), `s0 dst = , src = T564 , _ jump = _}
24	OPER {assem = movl `d0, 40(%ebp) dst = T566 , src = , _ jump = _}
25	MOVE {assem = movl `d0,`s0
, dst =T565, src =T566}
26	OPER {assem = movl 40(%ebp), `s0 dst = , src = T565 , _ jump = _}
27	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
28	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
29	OPER {assem = movl `d0, 44(%ebp) dst = T567 , src = , _ jump = _}
30	OPER {assem = pushl `s0
 dst = , src = T567 , _ jump = _}
31	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
32	OPER {assem = call printint_L36
 dst = eax , src = , _ jump = _}
33	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
34	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
35	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
36	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
37	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
38	OPER {assem = pushl L95
 dst = , src = , _ jump = _}
39	OPER {assem = call print
 dst = eax , src = , _ jump = _}
40	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
41	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
42	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
43	OPER {assem = movl `d0, 48(%ebp) dst = T568 , src = , _ jump = _}
44	MOVE {assem = movl `d0,`s0
, dst =T119, src =T568}
45	OPER {assem = movl `d0,$1
 dst = T569 , src = , _ jump = _}
46	OPER {assem = movl 52(%ebp), `s0 dst = , src = T569 , _ jump = _}
47	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
48	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
49	OPER {assem = pushl `s0
 dst = , src = T119 , _ jump = _}
50	OPER {assem = call _checkNil
 dst = eax , src = , _ jump = _}
51	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
52	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
53	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
54	MOVE {assem = movlE1 `d0,`s0
, dst =T266, src =T119}
55	OPER {assem = movl `d0, 56(%ebp) dst = T570 , src = , _ jump = _}
56	OPER {assem = imul `d0,`s0*$4
 dst = T267 , src = T570 , _ jump = _}
57	OPER {assem = addl `d0,`s0
 dst = T266 , src = T267 , _ jump = _}
58	OPER {assem = movl `d0,(`s0+0)
 dst = T265 , src = T266 , _ jump = _}
59	MOVE {assem = movl `d0,`s0
, dst =T571, src =T265}
60	OPER {assem = movl 60(%ebp), `s0 dst = , src = T571 , _ jump = _}
61	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
62	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
63	OPER {assem = movl `d0, 64(%ebp) dst = T572 , src = , _ jump = _}
64	OPER {assem = pushl `s0
 dst = , src = T572 , _ jump = _}
65	OPER {assem = pushl (%fp+8)
 dst = , src = , _ jump = _}
66	OPER {assem = call printlist_L35
 dst = eax , src = , _ jump = _}
67	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
68	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
69	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
70	LABEL {assem = L98:
 lab = L98}
71	OPER {assem = jmp L106
 dst = , src = , _ jump = _}
72	LABEL {assem = L96:
 lab = L96}
73	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
74	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
75	OPER {assem = pushl L93
 dst = , src = , _ jump = _}
76	OPER {assem = call print
 dst = eax , src = , _ jump = _}
77	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
78	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
79	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
80	OPER {assem = jmp L98
 dst = , src = , _ jump = _}
81	LABEL {assem = L106:
 lab = L106}

MOVE {assem = movl `d0,`s0
, dst =T114, src =T559}
A workListMoves -> T559 T114
MOVE {assem = movlE1 `d0,`s0
, dst =T263, src =T114}
A workListMoves -> T114 T263
MOVE {assem = movl `d0,`s0
, dst =T565, src =T566}
A workListMoves -> T566 T565
MOVE {assem = movl `d0,`s0
, dst =T119, src =T568}
A workListMoves -> T568 T119
MOVE {assem = movlE1 `d0,`s0
, dst =T266, src =T119}
A workListMoves -> T119 T266
MOVE {assem = movl `d0,`s0
, dst =T571, src =T265}
A workListMoves -> T265 T571
JAMON EN coalesce
Coalesce 1 T114 T263
Coalesce 2
Coalesce 3
Coalesce 1 T119 T266
Coalesce 2
Coalesce 3
Coalesce 1 T265 T571
Coalesce 2
Coalesce 3
Coalesce 1 T559 T114
Coalesce 2
Coalesce 3
Coalesce 1 T566 T565
Coalesce 2
Coalesce 3
Coalesce 1 T568 T119
Coalesce 2
Coalesce 3
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
~~~~~~~~~~> T114 edx
~~~~~~~~~~> T119 ecx
~~~~~~~~~~> T263 ebx
~~~~~~~~~~> T265 esi
~~~~~~~~~~> T266 eax
~~~~~~~~~~> T267 edi
CODIGO: 
0	LABEL {assem = _tigermain:
 lab = _tigermain}
1	MOVE {assem = movlasdf `d0,`s0
, dst =T268, src =ebp}
2	OPER {assem = addl `d0,$-4
 dst = T268 , src = , _ jump = _}
3	MOVE {assem = movl `d0,`s0
, dst =T142, src =T268}
4	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
5	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
6	OPER {assem = call getstr
 dst = eax , src = , _ jump = _}
7	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
8	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
9	MOVE {assem = movl `d0,`s0
, dst =T0, src =eax}
10	OPER {assem = movl (`s0),`s1
 dst = , src = T142 T0 , _ jump = _}
11	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
12	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
13	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
14	OPER {assem = call readlist_L38
 dst = eax , src = , _ jump = _}
15	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
16	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
17	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
18	MOVE {assem = movl `d0,`s0
, dst =T122, src =eax}
19	MOVE {assem = movl `d0,`s0
, dst =T123, src =T122}
20	MOVE {assem = movlasdf `d0,`s0
, dst =T269, src =ebp}
21	OPER {assem = addl `d0,$-4
 dst = T269 , src = , _ jump = _}
22	MOVE {assem = movl `d0,`s0
, dst =T143, src =T269}
23	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
24	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
25	OPER {assem = call getstr
 dst = eax , src = , _ jump = _}
26	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
27	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
28	MOVE {assem = movl `d0,`s0
, dst =T124, src =eax}
29	OPER {assem = movl (`s0),`s1
 dst = , src = T143 T124 , _ jump = _}
30	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
31	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
32	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
33	OPER {assem = call readlist_L38
 dst = eax , src = , _ jump = _}
34	OPER {assem = addl %esp,$4
 dst = eax ecx edx , src = , _ jump = _}
35	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
36	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
37	MOVE {assem = movl `d0,`s0
, dst =T125, src =eax}
38	MOVE {assem = movl `d0,`s0
, dst =T126, src =T125}
39	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
40	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
41	OPER {assem = pushl `s0
 dst = , src = T126 , _ jump = _}
42	OPER {assem = pushl `s0
 dst = , src = T123 , _ jump = _}
43	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
44	OPER {assem = call merge_L37
 dst = eax , src = , _ jump = _}
45	OPER {assem = addl %esp,$12
 dst = eax ecx edx , src = , _ jump = _}
46	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
47	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
48	MOVE {assem = movl `d0,`s0
, dst =T128, src =eax}
49	MOVE {assem = movl `d0,`s0
, dst =T129, src =T128}
50	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
51	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
52	OPER {assem = pushl `s0
 dst = , src = T129 , _ jump = _}
53	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
54	OPER {assem = call printlist_L35
 dst = eax , src = , _ jump = _}
55	OPER {assem = addl %esp,$8
 dst = eax ecx edx , src = , _ jump = _}
56	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
57	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
58	OPER {assem = movl `d0,$0
 dst = eax , src = , _ jump = _}
59	OPER {assem = jmp L107
 dst = , src = , _ jump = _}
60	LABEL {assem = L107:
 lab = L107}

MOVE {assem = movl `d0,`s0
, dst =T142, src =T268}
A workListMoves -> T268 T142
MOVE {assem = movl `d0,`s0
, dst =T0, src =eax}
A workListMoves -> eax T0
MOVE {assem = movl `d0,`s0
, dst =T122, src =eax}
A workListMoves -> eax T122
MOVE {assem = movl `d0,`s0
, dst =T123, src =T122}
A workListMoves -> T122 T123
MOVE {assem = movl `d0,`s0
, dst =T143, src =T269}
A workListMoves -> T269 T143
MOVE {assem = movl `d0,`s0
, dst =T124, src =eax}
A workListMoves -> eax T124
MOVE {assem = movl `d0,`s0
, dst =T125, src =eax}
A workListMoves -> eax T125
MOVE {assem = movl `d0,`s0
, dst =T126, src =T125}
A workListMoves -> T125 T126
MOVE {assem = movl `d0,`s0
, dst =T128, src =eax}
A workListMoves -> eax T128
MOVE {assem = movl `d0,`s0
, dst =T129, src =T128}
A workListMoves -> T128 T129
JAMON EN coalesce
Coalesce 1 T122 T123
Coalesce 2
Coalesce 3
Coalesce 1 T125 T126
Coalesce 2
Coalesce 3
Coalesce 1 T128 T129
Coalesce 2
Coalesce 3
Coalesce 1 T268 T142
Coalesce 2
Coalesce 3
Coalesce 1 T269 T143
Coalesce 2
Coalesce 3
Coalesce 1 eax T0
Coalesce 2
Coalesce 3
Coalesce 1 eax T122
Coalesce 2
Coalesce 3
Coalesce 1 eax T124
Coalesce 2
Coalesce 3
Coalesce 1 eax T125
Coalesce 2
Coalesce 3
Coalesce 1 eax T128
Coalesce 2
Coalesce 3
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
JAMON EN simplify
CODIGO: 
0	LABEL {assem = _tigermain:
 lab = _tigermain}
1	MOVE {assem = movlasdf `d0,`s0
, dst =T268, src =ebp}
2	OPER {assem = addl `d0,$-4
 dst = T268 , src = , _ jump = _}
3	MOVE {assem = movl `d0,`s0
, dst =T142, src =T268}
4	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
5	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
6	OPER {assem = call getstr
 dst = T573 , src = , _ jump = _}
7	OPER {assem = movl 20(%ebp), `s0 dst = , src = T573 , _ jump = _}
8	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
9	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
10	OPER {assem = movl `d0, 24(%ebp) dst = T575 , src = , _ jump = _}
11	MOVE {assem = movl `d0,`s0
, dst =T574, src =T575}
12	OPER {assem = movl 24(%ebp), `s0 dst = , src = T574 , _ jump = _}
13	OPER {assem = movl `d0, 28(%ebp) dst = T576 , src = , _ jump = _}
14	OPER {assem = movl (`s0),`s1
 dst = , src = T142 T576 , _ jump = _}
15	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
16	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
17	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
18	OPER {assem = call readlist_L38
 dst = T577 , src = , _ jump = _}
19	OPER {assem = movl 32(%ebp), `s0 dst = , src = T577 , _ jump = _}
20	OPER {assem = addl %esp,$4
 dst = T578 ecx edx , src = , _ jump = _}
21	OPER {assem = movl 36(%ebp), `s0 dst = , src = T578 , _ jump = _}
22	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
23	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
24	OPER {assem = movl `d0, 40(%ebp) dst = T580 , src = , _ jump = _}
25	MOVE {assem = movl `d0,`s0
, dst =T579, src =T580}
26	OPER {assem = movl 40(%ebp), `s0 dst = , src = T579 , _ jump = _}
27	OPER {assem = movl `d0, 44(%ebp) dst = T581 , src = , _ jump = _}
28	MOVE {assem = movl `d0,`s0
, dst =T582, src =T581}
29	OPER {assem = movl 44(%ebp), `s0 dst = , src = T582 , _ jump = _}
30	MOVE {assem = movlasdf `d0,`s0
, dst =T269, src =ebp}
31	OPER {assem = addl `d0,$-4
 dst = T269 , src = , _ jump = _}
32	MOVE {assem = movl `d0,`s0
, dst =T143, src =T269}
33	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
34	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
35	OPER {assem = call getstr
 dst = T583 , src = , _ jump = _}
36	OPER {assem = movl 48(%ebp), `s0 dst = , src = T583 , _ jump = _}
37	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
38	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
39	OPER {assem = movl `d0, 52(%ebp) dst = T585 , src = , _ jump = _}
40	MOVE {assem = movl `d0,`s0
, dst =T584, src =T585}
41	OPER {assem = movl 52(%ebp), `s0 dst = , src = T584 , _ jump = _}
42	OPER {assem = movl `d0, 56(%ebp) dst = T586 , src = , _ jump = _}
43	OPER {assem = movl (`s0),`s1
 dst = , src = T143 T586 , _ jump = _}
44	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
45	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
46	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
47	OPER {assem = call readlist_L38
 dst = T587 , src = , _ jump = _}
48	OPER {assem = movl 60(%ebp), `s0 dst = , src = T587 , _ jump = _}
49	OPER {assem = addl %esp,$4
 dst = T588 ecx edx , src = , _ jump = _}
50	OPER {assem = movl 64(%ebp), `s0 dst = , src = T588 , _ jump = _}
51	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
52	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
53	OPER {assem = movl `d0, 68(%ebp) dst = T590 , src = , _ jump = _}
54	MOVE {assem = movl `d0,`s0
, dst =T589, src =T590}
55	OPER {assem = movl 68(%ebp), `s0 dst = , src = T589 , _ jump = _}
56	OPER {assem = movl `d0, 72(%ebp) dst = T591 , src = , _ jump = _}
57	MOVE {assem = movl `d0,`s0
, dst =T592, src =T591}
58	OPER {assem = movl 72(%ebp), `s0 dst = , src = T592 , _ jump = _}
59	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
60	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
61	OPER {assem = movl `d0, 76(%ebp) dst = T593 , src = , _ jump = _}
62	OPER {assem = pushl `s0
 dst = , src = T593 , _ jump = _}
63	OPER {assem = movl `d0, 80(%ebp) dst = T594 , src = , _ jump = _}
64	OPER {assem = pushl `s0
 dst = , src = T594 , _ jump = _}
65	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
66	OPER {assem = call merge_L37
 dst = T595 , src = , _ jump = _}
67	OPER {assem = movl 84(%ebp), `s0 dst = , src = T595 , _ jump = _}
68	OPER {assem = addl %esp,$12
 dst = T596 ecx edx , src = , _ jump = _}
69	OPER {assem = movl 88(%ebp), `s0 dst = , src = T596 , _ jump = _}
70	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
71	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
72	OPER {assem = movl `d0, 92(%ebp) dst = T597 , src = , _ jump = _}
73	MOVE {assem = movl `d0,`s0
, dst =T128, src =T597}
74	MOVE {assem = movl `d0,`s0
, dst =T129, src =T128}
75	OPER {assem = pushl `s0
 dst = , src = ecx , _ jump = _}
76	OPER {assem = pushl `s0
 dst = , src = edx , _ jump = _}
77	OPER {assem = pushl `s0
 dst = , src = T129 , _ jump = _}
78	OPER {assem = pushl %fp
 dst = , src = , _ jump = _}
79	OPER {assem = call printlist_L35
 dst = T598 , src = , _ jump = _}
80	OPER {assem = movl 96(%ebp), `s0 dst = , src = T598 , _ jump = _}
81	OPER {assem = addl %esp,$8
 dst = T599 ecx edx , src = , _ jump = _}
82	OPER {assem = movl 100(%ebp), `s0 dst = , src = T599 , _ jump = _}
83	OPER {assem = popl `d0
 dst = edx , src = , _ jump = _}
84	OPER {assem = popl `d0
 dst = ecx , src = , _ jump = _}
85	OPER {assem = movl `d0,$0
 dst = T600 , src = , _ jump = _}
86	OPER {assem = movl 104(%ebp), `s0 dst = , src = T600 , _ jump = _}
87	OPER {assem = jmp L107
 dst = , src = , _ jump = _}
88	LABEL {assem = L107:
 lab = L107}

MOVE {assem = movl `d0,`s0
, dst =T142, src =T268}
A workListMoves -> T268 T142
MOVE {assem = movl `d0,`s0
, dst =T574, src =T575}
A workListMoves -> T575 T574
MOVE {assem = movl `d0,`s0
, dst =T579, src =T580}
A workListMoves -> T580 T579
MOVE {assem = movl `d0,`s0
, dst =T582, src =T581}
A workListMoves -> T581 T582
MOVE {assem = movl `d0,`s0
, dst =T143, src =T269}
A workListMoves -> T269 T143
MOVE {assem = movl `d0,`s0
, dst =T584, src =T585}
A workListMoves -> T585 T584
MOVE {assem = movl `d0,`s0
, dst =T589, src =T590}
A workListMoves -> T590 T589
MOVE {assem = movl `d0,`s0
, dst =T592, src =T591}
A workListMoves -> T591 T592
MOVE {assem = movl `d0,`s0
, dst =T128, src =T597}
A workListMoves -> T597 T128
MOVE {assem = movl `d0,`s0
, dst =T129, src =T128}
A workListMoves -> T128 T129
JAMON EN coalesce
Coalesce 1 T128 T129
Coalesce 2
Coalesce 3
Coalesce 1 T268 T142
Coalesce 2
Coalesce 3
Coalesce 1 T269 T143
Coalesce 2
Coalesce 3
Coalesce 1 T575 T574
Coalesce 2
Coalesce 3
Coalesce 1 T580 T579
Coalesce 2
Coalesce 3
Coalesce 1 T581 T582
Coalesce 2
Coalesce 3
Coalesce 1 T585 T584
Coalesce 2
Coalesce 3
Coalesce 1 T590 T589
Coalesce 2
Coalesce 3
Coalesce 1 T591 T592
Coalesce 2
Coalesce 3
Coalesce 1 T597 T128
Coalesce 2
Coalesce 3
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
JAMON EN selectSpill
JAMON EN simplify
~~~~~~~~~~> T128 esi
~~~~~~~~~~> T129 edi
~~~~~~~~~~> T142 edx
~~~~~~~~~~> T143 ecx
~~~~~~~~~~> T268 ebx
~~~~~~~~~~> T269 eax
ksajdsiojdaikjdsioadjsaoosdjaoi
ksajdsiojdaikjdsioadjsaoosdjaoi
ksajdsiojdaikjdsioadjsaoosdjaoi
ksajdsiojdaikjdsioadjsaoosdjaoi
ksajdsiojdaikjdsioadjsaoosdjaoi
ksajdsiojdaikjdsioadjsaoosdjaoi
ksajdsiojdaikjdsioadjsaoosdjaoi
ksajdsiojdaikjdsioadjsaoosdjaoi
ksajdsiojdaikjdsioadjsaoosdjaoi


Codigo despues del coloreo:
L3: .ascii "0"
L4: .ascii "0"
L7: .ascii "9"
L8: .ascii "9"
isdigit_L2: .ascii 
L18: .ascii " "
L19: .ascii "\x0a"
skipto_L1: .ascii 
L31: .ascii "0"
L32: .ascii "0"
readint_L0: .ascii 
readlist_L38: .ascii 
merge_L37: .ascii 
L66: .ascii "0"
L67: .ascii "0"
L68: .ascii "0"
L69: .ascii "0"
L70: .ascii "0"
L71: .ascii "0"
L72: .ascii "0"
L73: .ascii "0"
f_L63: .ascii 
L78: .ascii "-"
L79: .ascii "-"
L82: .ascii "0"
L83: .ascii "0"
printint_L36: .ascii 
L92: .ascii "\x0a"
L93: .ascii "\x0a"
L94: .ascii " "
L95: .ascii " "
printlist_L35: .ascii 
_tigermain: .ascii 
isdigit_L2:

	enter $666,$0x0

	pushl %ecx

	pushl %edx

	pushl L4

	call ord

	movl 16(%ebp), %T270
	addl %esp,$4

	movl 20(%ebp), %T271
	popl %edx

	popl %ecx

	movl %T272, 24(%ebp)
	movl %esi,%T272

	movl %T273,%esi

	movl 28(%ebp), %T273
	pushl %ecx

	pushl %edx

	movl %T274, 32(%ebp)
	pushl %T274

	call ord

	movl 36(%ebp), %T275
	addl %esp,$4

	movl 40(%ebp), %T276
	popl %edx

	popl %ecx

	movl %T277, 44(%ebp)
	movl %edi,%T277

	movl %T278, 48(%ebp)
	cmpl %T278,%edi

	jle L13

L14:

	movl %ebx,$0

L15:

	movl %T279,%ebx

	movl 52(%ebp), %T279
	jmp L99

L13:

	movl %eax,$1

	pushl %ecx

	pushl %edx

	movl %T280, 56(%ebp)
	pushl %T280

	call ord

	movl 60(%ebp), %T281
	addl %esp,$4

	movl 64(%ebp), %T282
	popl %edx

	popl %ecx

	movl %T283, 68(%ebp)
	movl %edx,%T283

	movl %T284,%edx

	movl 72(%ebp), %T284
	pushl %ecx

	pushl %edx

	pushl L8

	call ord

	movl 76(%ebp), %T285
	addl %esp,$4

	movl 80(%ebp), %T286
	popl %edx

	popl %ecx

	movl %T287, 84(%ebp)
	movl %ecx,%T287

	movl %T288, 88(%ebp)
	cmpl %T288,%ecx

	jle L16

L17:

	movl %eax,$0

L16:

	movl %ebx,%eax

	jmp L15

L99:

	leave

	ret

L28:

	enter $666,$0x0

	movl %T289,(s0+8)

	movl 16(%ebp), %T289
	movl %T291, 20(%ebp)
	movl %T290,(s0+8)

	movl 20(%ebp), %T290
	movl %T293, 24(%ebp)
	movl %T292,(s0+-4)

	movl 24(%ebp), %T292
	movl %T295, 28(%ebp)
	movl %T294,%T295

	movl 28(%ebp), %T294
	movl %T296,L18

	movl 32(%ebp), %T296
	pushl %ecx

	pushl %edx

	movl %T297, 36(%ebp)
	pushl %T297

	movl %T298, 40(%ebp)
	pushl %T298

	call _stringcmp

	movl 44(%ebp), %T299
	addl %esp,$8

	movl 48(%ebp), %T300
	popl %edx

	popl %ecx

	movl %T302, 52(%ebp)
	movl %T301,%T302

	movl 52(%ebp), %T301
	movl %T303, 56(%ebp)
	cmpl %T303,$0

	je L22

L23:

	movl %ebx,$1

	movl %T304,(s0+8)

	movl 60(%ebp), %T304
	movl %T306, 64(%ebp)
	movl %T305,(s0+8)

	movl 64(%ebp), %T305
	movl %T308, 68(%ebp)
	movl %T307,(s0+-4)

	movl 68(%ebp), %T307
	movl %T310, 72(%ebp)
	movl %T309,%T310

	movl 72(%ebp), %T309
	movl %T311,L19

	movl 76(%ebp), %T311
	pushl %ecx

	pushl %edx

	movl %T312, 80(%ebp)
	pushl %T312

	movl %T313, 84(%ebp)
	pushl %T313

	call _stringcmp

	movl 88(%ebp), %T314
	addl %esp,$8

	movl 92(%ebp), %T315
	popl %edx

	popl %ecx

	movl %T317, 96(%ebp)
	movl %T316,%T317

	movl 96(%ebp), %T316
	movl %T318, 100(%ebp)
	cmpl %T318,$0

	je L25

L26:

	movl %ebx,$0

L25:

	movl %ecx,%ebx

L24:

	cmpl %ecx,$0

	jne L29

L27:

	jmp L100

L22:

	movl %ecx,$1

	jmp L24

L29:

	movl %edi,(s0+8)

	movl %esi,(s0+8)

	movlasdf %eax,%esi

	addl %eax,$-4

	movl %T319,%eax

	movl 104(%ebp), %T319
	pushl %ecx

	pushl %edx

	call getstr

	movl 108(%ebp), %T320
	popl %edx

	popl %ecx

	movl %T321, 112(%ebp)
	movl %edx,%T321

	movl %T322, 116(%ebp)
	movl (%T322),%edx

	jmp L28

L100:

	leave

	ret

readint_L0:

	enter $666,$0x0

	movl %eax,$0

	pushl %ecx

	pushl %edx

	pushl %fp

	call skipto_L1

	movl 16(%ebp), %T323
	addl %esp,$4

	movl 20(%ebp), %T324
	popl %edx

	popl %ecx

	movl %T325, 24(%ebp)
	movl %ebx,%T325

	movl %T326,$0

	movl 28(%ebp), %T326
	pushl %ecx

	pushl %edx

	pushl %ebx

	call _checkNil

	movl 32(%ebp), %T327
	addl %esp,$4

	movl 36(%ebp), %T328
	popl %edx

	popl %ecx

	movlE1 %esi,%ebx

	movl %T330, 40(%ebp)
	imul %T329,%T330*$4

	movl 40(%ebp), %T329
	movl %T331, 44(%ebp)
	addl %esi,%T331

	movl %T332,%esi

	movl 48(%ebp), %T332
	movl %T333,(s0+8)

	movl 52(%ebp), %T333
	movl %T335, 56(%ebp)
	movl %T334,(s0+-4)

	movl 56(%ebp), %T334
	movl %T336, 60(%ebp)
	movl %T337,%T336

	movl 60(%ebp), %T337
	pushl %ecx

	pushl %edx

	movl %T338, 64(%ebp)
	pushl %T338

	pushl %fp

	call isdigit_L2

	movl 68(%ebp), %T339
	addl %esp,$8

	movl 72(%ebp), %T340
	popl %edx

	popl %ecx

	movl %T342, 76(%ebp)
	movl %T341,%T342

	movl 76(%ebp), %T341
	movl %T343, 80(%ebp)
	movl %T344, 80(%ebp)
	movl (%T343),%T344

L33:

	movl %T345,(s0+8)

	movl 84(%ebp), %T345
	movl %T347, 88(%ebp)
	movl %T346,(s0+-4)

	movl 88(%ebp), %T346
	movl %T348, 92(%ebp)
	movl %T349,%T348

	movl 92(%ebp), %T349
	pushl %ecx

	pushl %edx

	movl %T350, 96(%ebp)
	pushl %T350

	pushl %fp

	call isdigit_L2

	movl 100(%ebp), %T351
	addl %esp,$8

	movl 104(%ebp), %T352
	popl %edx

	popl %ecx

	movl %T354, 108(%ebp)
	movl %T353,%T354

	movl 108(%ebp), %T353
	movl %T355, 112(%ebp)
	cmpl %T355,$0

	jne L34

L30:

	movl %T356,%eax

	movl 116(%ebp), %T356
	jmp L101

L34:

	imul %T357,%eax*$10

	movl 120(%ebp), %T357
	movl %T359, 124(%ebp)
	movl %T358,%T359

	movl 124(%ebp), %T358
	movl %T360,(s0+8)

	movl 128(%ebp), %T360
	movl %T362, 132(%ebp)
	movl %T361,(s0+-4)

	movl 132(%ebp), %T361
	movl %T363, 136(%ebp)
	movl %T364,%T363

	movl 136(%ebp), %T364
	pushl %ecx

	pushl %edx

	movl %T365, 140(%ebp)
	pushl %T365

	call ord

	movl 144(%ebp), %T366
	addl %esp,$4

	movl 148(%ebp), %T367
	popl %edx

	popl %ecx

	movl %T369, 152(%ebp)
	movl %T368,%T369

	movl 152(%ebp), %T368
	movl %T370, 156(%ebp)
	movlE1 %edi,%T370

	movl %T371, 160(%ebp)
	addl %edi,%T371

	movl %T372,%edi

	movl 164(%ebp), %T372
	pushl %ecx

	pushl %edx

	pushl L32

	call ord

	movl 168(%ebp), %T373
	addl %esp,$4

	movl 172(%ebp), %T374
	popl %edx

	popl %ecx

	movl %T376, 176(%ebp)
	movl %T375,%T376

	movl 176(%ebp), %T375
	movl %T377, 180(%ebp)
	movl %edx,%T377

	movl %T378, 184(%ebp)
	subl %edx,%T378

	movl %eax,%edx

	movl %T379,(s0+8)

	movl 188(%ebp), %T379
	movl %T380, 192(%ebp)
	movlasdf %ecx,%T380

	addl %ecx,$-4

	movl %T381,%ecx

	movl 196(%ebp), %T381
	pushl %ecx

	pushl %edx

	call getstr

	movl 200(%ebp), %T382
	popl %edx

	popl %ecx

	movl %T384, 204(%ebp)
	movl %T383,%T384

	movl 204(%ebp), %T383
	movl %T385, 208(%ebp)
	movl %T386, 208(%ebp)
	movl (%T385),%T386

	jmp L33

L101:

	leave

	ret

readlist_L38:

	enter $666,$0x0

	pushl %ecx

	pushl %edx

	pushl $0

	pushl $1

	call _allocRecord

	movl 16(%ebp), %T387
	addl %esp,$8

	movl 20(%ebp), %T388
	popl %edx

	popl %ecx

	movl %T389, 24(%ebp)
	movl %ecx,%T389

	pushl %ecx

	pushl %edx

	pushl %ecx

	pushl (%fp+8)

	call readint_L0

	movl 28(%ebp), %T390
	addl %esp,$8

	movl 32(%ebp), %T391
	popl %edx

	popl %ecx

	movl %T393, 36(%ebp)
	movl %T392,%T393

	movl 36(%ebp), %T392
	movl %T394, 40(%ebp)
	movl %T395,%T394

	movl 40(%ebp), %T395
	movl %ebx,%ecx

	movl %esi,$0

	pushl %ecx

	pushl %edx

	pushl %ebx

	call _checkNil

	movl 44(%ebp), %T396
	addl %esp,$4

	movl 48(%ebp), %T397
	popl %edx

	popl %ecx

	movlE1 %edx,%ebx

	imul %T398,%esi*$4

	movl 52(%ebp), %T398
	movl %T399, 56(%ebp)
	addl %edx,%T399

	movl %T400,(%edx+0)

	movl 60(%ebp), %T400
	movl %T401, 64(%ebp)
	cmpl %T401,$0

	jne L39

L40:

	movl %eax,$0

L41:

	movl %T402,%eax

	movl 68(%ebp), %T402
	jmp L102

L39:

	movl %T404, 72(%ebp)
	movl %T403,%T404

	movl 72(%ebp), %T403
	pushl %ecx

	pushl %edx

	pushl (%fp+8)

	call readlist_L38

	movl 76(%ebp), %T405
	addl %esp,$4

	movl 80(%ebp), %T406
	popl %edx

	popl %ecx

	movl %T407, 84(%ebp)
	movl %edi,%T407

	pushl %ecx

	pushl %edx

	pushl %edi

	movl %T408, 88(%ebp)
	pushl %T408

	pushl $2

	call _allocRecord

	movl 92(%ebp), %T409
	addl %esp,$12

	movl 96(%ebp), %T410
	popl %edx

	popl %ecx

	movl %T411, 100(%ebp)
	movl %eax,%T411

	jmp L41

L102:

	leave

	ret

merge_L37:

	enter $666,$0x0

	movl %T412, 16(%ebp)
	cmpl %T412,$0

	je L60

L61:

	movl %T413, 20(%ebp)
	cmpl %T413,$0

	je L55

L56:

	movl %T414, 24(%ebp)
	movl %T415,%T414

	movl 24(%ebp), %T415
	movl %T416,$0

	movl 28(%ebp), %T416
	pushl %ecx

	pushl %edx

	movl %T417, 32(%ebp)
	pushl %T417

	call _checkNil

	movl 36(%ebp), %T418
	addl %esp,$4

	movl 40(%ebp), %T419
	popl %edx

	popl %ecx

	movl %T421, 44(%ebp)
	movlE1 %T420,%T421

	movl 44(%ebp), %T420
	movl %T423, 48(%ebp)
	imul %T422,%T423*$4

	movl 48(%ebp), %T422
	movl %T425, 52(%ebp)
	addl %T424,%T425

	movl 52(%ebp), %T424
	movl %T427, 56(%ebp)
	movl %T426,(%T427+0)

	movl 56(%ebp), %T426
	movl %T429, 60(%ebp)
	movl %T428,%T429

	movl 60(%ebp), %T428
	movl %T430, 64(%ebp)
	movl %T431,%T430

	movl 64(%ebp), %T431
	movl %T432,$0

	movl 68(%ebp), %T432
	pushl %ecx

	pushl %edx

	movl %T433, 72(%ebp)
	pushl %T433

	call _checkNil

	movl 76(%ebp), %T434
	addl %esp,$4

	movl 80(%ebp), %T435
	popl %edx

	popl %ecx

	movl %T437, 84(%ebp)
	movlE1 %T436,%T437

	movl 84(%ebp), %T436
	movl %T439, 88(%ebp)
	imul %T438,%T439*$4

	movl 88(%ebp), %T438
	movl %T441, 92(%ebp)
	addl %T440,%T441

	movl 92(%ebp), %T440
	movl %T443, 96(%ebp)
	movl %T442,(%T443+0)

	movl 96(%ebp), %T442
	movl %T444, 100(%ebp)
	movl %T445, 100(%ebp)
	cmpl %T444,%T445

	jl L50

L51:

	movl %T446, 104(%ebp)
	movl %T447,%T446

	movl 104(%ebp), %T447
	movl %T448,$0

	movl 108(%ebp), %T448
	pushl %ecx

	pushl %edx

	movl %T449, 112(%ebp)
	pushl %T449

	call _checkNil

	movl 116(%ebp), %T450
	addl %esp,$4

	movl 120(%ebp), %T451
	popl %edx

	popl %ecx

	movl %T453, 124(%ebp)
	movlE1 %T452,%T453

	movl 124(%ebp), %T452
	movl %T455, 128(%ebp)
	imul %T454,%T455*$4

	movl 128(%ebp), %T454
	movl %T457, 132(%ebp)
	addl %T456,%T457

	movl 132(%ebp), %T456
	movl %T459, 136(%ebp)
	movl %T458,(%T459+0)

	movl 136(%ebp), %T458
	movl %T461, 140(%ebp)
	movl %T460,%T461

	movl 140(%ebp), %T460
	movl %T462, 144(%ebp)
	movl %T463,%T462

	movl 144(%ebp), %T463
	movl %T464,$1

	movl 148(%ebp), %T464
	pushl %ecx

	pushl %edx

	movl %T465, 152(%ebp)
	pushl %T465

	call _checkNil

	movl 156(%ebp), %T466
	addl %esp,$4

	movl 160(%ebp), %T467
	popl %edx

	popl %ecx

	movl %T469, 164(%ebp)
	movlE1 %T468,%T469

	movl 164(%ebp), %T468
	movl %T471, 168(%ebp)
	imul %T470,%T471*$4

	movl 168(%ebp), %T470
	movl %T473, 172(%ebp)
	addl %T472,%T473

	movl 172(%ebp), %T472
	movl %T475, 176(%ebp)
	movl %T474,(%T475+0)

	movl 176(%ebp), %T474
	movl %T476, 180(%ebp)
	movl %T477,%T476

	movl 180(%ebp), %T477
	pushl %ecx

	pushl %edx

	movl %T478, 184(%ebp)
	pushl %T478

	movl %T479, 188(%ebp)
	pushl %T479

	pushl (%fp+8)

	call merge_L37

	movl 192(%ebp), %T480
	addl %esp,$12

	movl 196(%ebp), %T481
	popl %edx

	popl %ecx

	movl %T483, 200(%ebp)
	movl %T482,%T483

	movl 200(%ebp), %T482
	pushl %ecx

	pushl %edx

	movl %T484, 204(%ebp)
	pushl %T484

	movl %T485, 208(%ebp)
	pushl %T485

	pushl $2

	call _allocRecord

	movl 212(%ebp), %T486
	addl %esp,$12

	movl 216(%ebp), %T487
	popl %edx

	popl %ecx

	movl %T488, 220(%ebp)
	movl %ecx,%T488

L52:

	movl %ebx,%ecx

L57:

	movl %eax,%ebx

L62:

	movl %T489,%eax

	movl 224(%ebp), %T489
	jmp L103

L60:

	movl %T490, 228(%ebp)
	movl %eax,%T490

	jmp L62

L55:

	movl %T491, 232(%ebp)
	movl %ebx,%T491

	jmp L57

L50:

	movl %T492, 236(%ebp)
	movl %edi,%T492

	movl %T493,$0

	movl 240(%ebp), %T493
	pushl %ecx

	pushl %edx

	pushl %edi

	call _checkNil

	movl 244(%ebp), %T494
	addl %esp,$4

	movl 248(%ebp), %T495
	popl %edx

	popl %ecx

	movlE1 %T496,%edi

	movl 252(%ebp), %T496
	movl %T498, 256(%ebp)
	imul %T497,%T498*$4

	movl 256(%ebp), %T497
	movl %T500, 260(%ebp)
	addl %T499,%T500

	movl 260(%ebp), %T499
	movl %T502, 264(%ebp)
	movl %T501,(%T502+0)

	movl 264(%ebp), %T501
	movl %T504, 268(%ebp)
	movl %T503,%T504

	movl 268(%ebp), %T503
	movl %T505, 272(%ebp)
	movl %edx,%T505

	movl %T506,$1

	movl 276(%ebp), %T506
	pushl %ecx

	pushl %edx

	pushl %edx

	call _checkNil

	movl 280(%ebp), %T507
	addl %esp,$4

	movl 284(%ebp), %T508
	popl %edx

	popl %ecx

	movlE1 %esi,%edx

	movl %T510, 288(%ebp)
	imul %T509,%T510*$4

	movl 288(%ebp), %T509
	movl %T511, 292(%ebp)
	addl %esi,%T511

	movl %T512,(%esi+0)

	movl 296(%ebp), %T512
	movl %T513, 300(%ebp)
	movl %T514,%T513

	movl 300(%ebp), %T514
	pushl %ecx

	pushl %edx

	movl %T515, 304(%ebp)
	pushl %T515

	movl %T516, 308(%ebp)
	pushl %T516

	pushl (%fp+8)

	call merge_L37

	movl 312(%ebp), %T517
	addl %esp,$12

	movl 316(%ebp), %T518
	popl %edx

	popl %ecx

	movl %T520, 320(%ebp)
	movl %T519,%T520

	movl 320(%ebp), %T519
	pushl %ecx

	pushl %edx

	movl %T521, 324(%ebp)
	pushl %T521

	movl %T522, 328(%ebp)
	pushl %T522

	pushl $2

	call _allocRecord

	movl 332(%ebp), %T523
	addl %esp,$12

	movl 336(%ebp), %T524
	popl %edx

	popl %ecx

	movl %T525, 340(%ebp)
	movl %ecx,%T525

	jmp L52

L103:

	leave

	ret

f_L63:

	enter $666,$0x0

	movl %T554, 116(%ebp)
	cmpl %T554,$0

	jg L74

L75:

	jmp L104

L74:

	movl %T555, 120(%ebp)
	movl %T526,%T555

	movl 16(%ebp), %T526
	movl %T527, 20(%ebp)
	CWQ

	movl %ebx,$10

	idiv %ebx

	movl 24(%ebp), %T528
	movl %T529, 28(%ebp)
	movl %ebx,%T529

	movl %edi,%ebx

	pushl %ecx

	pushl %edx

	pushl %edi

	pushl (%fp+8)

	call f_L63

	movl 32(%ebp), %T530
	addl %esp,$8

	movl 36(%ebp), %T531
	popl %edx

	popl %ecx

	movl %T556, 124(%ebp)
	movl %edx,%T556

	movl %T557, 128(%ebp)
	movl %T532,%T557

	movl 40(%ebp), %T532
	movl %T533, 44(%ebp)
	CWQ

	movl %eax,$10

	idiv %eax

	movl 48(%ebp), %T534
	movl %T535, 52(%ebp)
	movl %eax,%T535

	imul %esi,%eax*$10

	subl %edx,%esi

	movl %T536,%edx

	movl 56(%ebp), %T536
	pushl %ecx

	pushl %edx

	pushl L73

	call ord

	movl 60(%ebp), %T537
	addl %esp,$4

	movl 64(%ebp), %T538
	popl %edx

	popl %ecx

	movl %T540, 68(%ebp)
	movl %T539,%T540

	movl 68(%ebp), %T539
	movl %T541, 72(%ebp)
	movlE1 %ecx,%T541

	movl %T542, 76(%ebp)
	addl %ecx,%T542

	movl %T543,%ecx

	movl 80(%ebp), %T543
	pushl %ecx

	pushl %edx

	movl %T544, 84(%ebp)
	pushl %T544

	call chr

	movl 88(%ebp), %T545
	addl %esp,$4

	movl 92(%ebp), %T546
	popl %edx

	popl %ecx

	movl %T548, 96(%ebp)
	movl %T547,%T548

	movl 96(%ebp), %T547
	movl %T549, 100(%ebp)
	movl %T550,%T549

	movl 100(%ebp), %T550
	pushl %ecx

	pushl %edx

	movl %T551, 104(%ebp)
	pushl %T551

	call print

	movl 108(%ebp), %T552
	addl %esp,$4

	movl 112(%ebp), %T553
	popl %edx

	popl %ecx

	jmp L75

L104:

	leave

	ret

printint_L36:

	enter $666,$0x0

	cmpl %ecx,$0

	jl L87

L88:

	cmpl %ecx,$0

	jg L84

L85:

	pushl %ecx

	pushl %edx

	pushl L83

	call print

	addl %esp,$4

	popl %edx

	popl %ecx

L86:

L89:

	jmp L105

L87:

	pushl %ecx

	pushl %edx

	pushl L79

	call print

	addl %esp,$4

	popl %edx

	popl %ecx

	movl %eax, $0

	subl %eax,%ecx

	movl %ebx,%eax

	pushl %ecx

	pushl %edx

	pushl %ebx

	pushl %fp

	call f_L63

	addl %esp,$8

	popl %edx

	popl %ecx

	jmp L89

L84:

	pushl %ecx

	pushl %edx

	pushl %ecx

	pushl %fp

	call f_L63

	addl %esp,$8

	popl %edx

	popl %ecx

	jmp L86

L105:

	leave

	ret

printlist_L35:

	enter $666,$0x0

	movl %T558, 16(%ebp)
	cmpl %T558,$0

	je L96

L97:

	movl %T559, 20(%ebp)
	movl %edx,%T559

	movl %T560,$0

	movl 24(%ebp), %T560
	pushl %ecx

	pushl %edx

	pushl %edx

	call _checkNil

	addl %esp,$4

	popl %edx

	popl %ecx

	movlE1 %ebx,%edx

	movl %T561, 28(%ebp)
	imul %T562,%T561*$4

	movl 28(%ebp), %T562
	movl %T563, 32(%ebp)
	addl %ebx,%T563

	movl %T564,(%ebx+0)

	movl 36(%ebp), %T564
	movl %T566, 40(%ebp)
	movl %T565,%T566

	movl 40(%ebp), %T565
	pushl %ecx

	pushl %edx

	movl %T567, 44(%ebp)
	pushl %T567

	pushl (%fp+8)

	call printint_L36

	addl %esp,$8

	popl %edx

	popl %ecx

	pushl %ecx

	pushl %edx

	pushl L95

	call print

	addl %esp,$4

	popl %edx

	popl %ecx

	movl %T568, 48(%ebp)
	movl %ecx,%T568

	movl %T569,$1

	movl 52(%ebp), %T569
	pushl %ecx

	pushl %edx

	pushl %ecx

	call _checkNil

	addl %esp,$4

	popl %edx

	popl %ecx

	movlE1 %eax,%ecx

	movl %T570, 56(%ebp)
	imul %edi,%T570*$4

	addl %eax,%edi

	movl %esi,(%eax+0)

	movl %T571,%esi

	movl 60(%ebp), %T571
	pushl %ecx

	pushl %edx

	movl %T572, 64(%ebp)
	pushl %T572

	pushl (%fp+8)

	call printlist_L35

	addl %esp,$8

	popl %edx

	popl %ecx

L98:

	jmp L106

L96:

	pushl %ecx

	pushl %edx

	pushl L93

	call print

	addl %esp,$4

	popl %edx

	popl %ecx

	jmp L98

L106:

	leave

	ret

_tigermain:

	enter $666,$0x0

	movlasdf %ebx,%ebp

	addl %ebx,$-4

	movl %edx,%ebx

	pushl %ecx

	pushl %edx

	call getstr

	movl 20(%ebp), %T573
	popl %edx

	popl %ecx

	movl %T575, 24(%ebp)
	movl %T574,%T575

	movl 24(%ebp), %T574
	movl %T576, 28(%ebp)
	movl (%edx),%T576

	pushl %ecx

	pushl %edx

	pushl %fp

	call readlist_L38

	movl 32(%ebp), %T577
	addl %esp,$4

	movl 36(%ebp), %T578
	popl %edx

	popl %ecx

	movl %T580, 40(%ebp)
	movl %T579,%T580

	movl 40(%ebp), %T579
	movl %T581, 44(%ebp)
	movl %T582,%T581

	movl 44(%ebp), %T582
	movlasdf %eax,%ebp

	addl %eax,$-4

	movl %ecx,%eax

	pushl %ecx

	pushl %edx

	call getstr

	movl 48(%ebp), %T583
	popl %edx

	popl %ecx

	movl %T585, 52(%ebp)
	movl %T584,%T585

	movl 52(%ebp), %T584
	movl %T586, 56(%ebp)
	movl (%ecx),%T586

	pushl %ecx

	pushl %edx

	pushl %fp

	call readlist_L38

	movl 60(%ebp), %T587
	addl %esp,$4

	movl 64(%ebp), %T588
	popl %edx

	popl %ecx

	movl %T590, 68(%ebp)
	movl %T589,%T590

	movl 68(%ebp), %T589
	movl %T591, 72(%ebp)
	movl %T592,%T591

	movl 72(%ebp), %T592
	pushl %ecx

	pushl %edx

	movl %T593, 76(%ebp)
	pushl %T593

	movl %T594, 80(%ebp)
	pushl %T594

	pushl %fp

	call merge_L37

	movl 84(%ebp), %T595
	addl %esp,$12

	movl 88(%ebp), %T596
	popl %edx

	popl %ecx

	movl %T597, 92(%ebp)
	movl %esi,%T597

	movl %edi,%esi

	pushl %ecx

	pushl %edx

	pushl %edi

	pushl %fp

	call printlist_L35

	movl 96(%ebp), %T598
	addl %esp,$8

	movl 100(%ebp), %T599
	popl %edx

	popl %ecx

	movl %T600,$0

	movl 104(%ebp), %T600
	jmp L107

L107:

	leave

	ret

yes!!

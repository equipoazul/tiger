/home/nico/tiger/tests/type/assign-loop-var.tig
/* error: index variable erroneously assigned to.  */
for i := 10 to 1 do
  i := i - 1
Fail: Error -- línea 4: Variable de solo lectura.

-------------------------------------------------

/home/nico/tiger/tests/type/fun-vs-var.tig
let
   type a = int
   var a : a := 2
   function a (a : a) : a = a
in
   a (a + a); 0
end
Fail: Error -- línea 6: a no es una función

-------------------------------------------------

/home/nico/tiger/tests/type/nil-equal-nil.tig
nil = nil
Fail: Error -- línea 2: Tipos no comparables

-------------------------------------------------

/home/nico/tiger/tests/type/resultados.txt
assign-loop-var.tig             B
fun-vs-var.tig                  B
nil-equal-nil.tig               B
test09.tig                      B
test10.tig                      B
test11.tig                      B
test13.tig                      B
test14.tig                      B
test15.tig                      B
test16.tig                      B
test17.tig                      B
test18.tig                      B
test19.tig                      M - NI TIRA EL ARBOL
test20.tig                      M - NI TIRA EL ARBOL
test21.tig                      B
test22.tig                      B
test23.tig                      B
test24.tig                      B
test25.tig                      B
test26.tig                      B
test28.tig                      B
test29.tig                      B
test31.tig                      B
test32.tig                      B - ARREGLAR MSJ DE ERROR
test33.tig                      B  
test34.tig                      B
test35.tig                      B - Habria que arreglar msg de error
test36.tig                      B - Habria que arreglar msg de error
test38.tig                      B
test39.tig                      B
test40.tig                      B - Chequear el tipo de retorno del body (FuncDec)
test43.tig                      B
test45.tig                      B
test51.tig                      B
Error en parsing!(1)[var]
Fail: fin!
-------------------------------------------------

/home/nico/tiger/tests/type/resultados.txt~
assign-loop-var.tig             B
fun-vs-var.tig                  B
nil-equal-nil.tig               B
test09.tig                      B
test10.tig                      B
test11.tig                      B
test13.tig                      B
test14.tig                      B
test15.tig                      B
test16.tig                      B
test17.tig                      B
test18.tig                      B
test19.tig                      M - NI TIRA EL ARBOL
test20.tig                      M - NI TIRA EL ARBOL
test21.tig                      M - Chequear el tipo de retorno del body (FuncDec)
test22.tig                      B
test23.tig                      B
test24.tig                      B
test25.tig                      B
test26.tig                      B
test28.tig                      B
test29.tig                      B
test31.tig                      B
test32.tig                      B - ARREGLAR MSJ DE ERROR
test33.tig                      B  
test34.tig                      B
test35.tig                      B - Habria que arreglar msg de error
test36.tig                      B - Habria que arreglar msg de error
test38.tig                      B
test39.tig                      B
test40.tig                      M - IMPLEMENTAR CallExp
test43.tig                      B
test45.tig                      M - WHAT??????
test51.tig                      B
Error en parsing!(1)[var]
Fail: fin!
-------------------------------------------------

/home/nico/tiger/tests/type/test09.tig
/* error : types of then - else differ */

if (5>4) then 13 else  " "
Fail: Error -- línea 4: El tipo del if es incorrecto.

-------------------------------------------------

/home/nico/tiger/tests/type/test10.tig
/* error : body of while not unit */
while (10 > 5) do 5+6
Fail: Error -- línea 3: El cuerpo de un while no puede devolver un valor

-------------------------------------------------

/home/nico/tiger/tests/type/test11.tig
/* error hi expr is not int.  */
for i := 10 to " " do
  print ("Tiger\n")
Fail: Error -- línea 4: Error de tipo en la condición

-------------------------------------------------

/home/nico/tiger/tests/type/test13.tig
/* error : comparison of incompatible types */

3 > "df"
Fail: Error -- línea 4: Error de tipos, operando tipos distintos.

-------------------------------------------------

/home/nico/tiger/tests/type/test14.tig
/* error : compare rec with array */

let

	type arrtype = array of int
	type rectype = {name : string, id : int}

	var rec := rectype {name="aname", id=0}
	var arr := arrtype [3] of 0

in
	if rec <> arr then 3 else 4
end
Fail: Error -- línea 12: Tipos no comparables

-------------------------------------------------

/home/nico/tiger/tests/type/test14.tig~
/* error : compare rec with array */

let

	/*type arrtype = array of int*/
	type rectype = {name : string, id : int}

	var rec := rectype {name="aname", id=0}
/*	var arr := arrtype [3] of 0*/

in
	if rec <> 1 then 3 else 4
end
Fail: Error -- línea 12: Tipos no comparables

-------------------------------------------------

/home/nico/tiger/tests/type/test15.tig
/* error : if-then returns non unit */

if 20 then 3
Fail: Error -- línea 4: El tipo del if es incorrecto.

-------------------------------------------------

/home/nico/tiger/tests/type/test16.tig
/* error : mutually recursive types thet do not pass through record or array */
let 

type a=c
type b=a
type c=d
type d=a

in
 ""
end
Fail: ciclo!
-------------------------------------------------

/home/nico/tiger/tests/type/test17.tig
/* error : definition of recursive types is interrupted */
let
   /* define a tree */
  type tree ={key : int, children : treelist}

  var d : int :=0

  type treelist = {hd : tree, tl : treelist}

in
  d
end
Fail: Error -- línea 666: treelist*no existe

-------------------------------------------------

/home/nico/tiger/tests/type/test18.tig
/* error : definition of recursive functions is interrupted */
let

function do_nothing1 (a : int, b : string) : int=
		 (do_nothing2 (a+1);0)

var d :=0

function do_nothing2 (d : int) : string =
		 (do_nothing1 (d, "str");" ")

in
	do_nothing1 (0, "str2")
end

Fail: Error -- línea 5: do_nothing2 no es una función

-------------------------------------------------

/home/nico/tiger/tests/type/test19.tig
/* error : second function uses variables local to the first one, undeclared variable */
let

function do_nothing1 (a : int, b : string) : int=
		 (do_nothing2 (a+1);0)

function do_nothing2 (d : int) : string =
		 (do_nothing1 (a, "str");" ")

in
	do_nothing1 (0, "str2")
end

Fail: escape?? a inexist.
-------------------------------------------------

/home/nico/tiger/tests/type/test20.tig
/* error : undeclared variable i */
while 10 > 5 do (i+1; ())
Fail: escape?? i inexist.
-------------------------------------------------

/home/nico/tiger/tests/type/test21.tig
/* error : procedure returns value  and procedure is used in arexpr */
let
  /* calculate n! */
  function nfactor (n : int) =
    if  n = 0
        then 1
        else n * nfactor (n-1)

in
  nfactor (10)
end
Fail: Error -- línea 9: Error de tipos, operando tipos distintos.

-------------------------------------------------

/home/nico/tiger/tests/type/test22.tig
/* error : field not in record type */

let 
	type rectype = {name : string , id : int}
	var rec1 := rectype {name="Name", id=0}
in
	rec1.nam := "asd"
end
Fail: Error -- línea 8: Campo de record "nam" inexistente

-------------------------------------------------

/home/nico/tiger/tests/type/test23.tig
/* error : type mismatch */

let 
	type rectype = {name : string , id : int}
	var rec1 := rectype {name="aname", id=0}
in
	rec1.name := 3;
	rec1.id := "" 
end
Fail: Error -- línea 7: Error de tipos en asignacion

-------------------------------------------------

/home/nico/tiger/tests/type/test24.tig
/* error : variable not array */
let 
	var d :=0
in
	d[3]
end

Fail: Error -- línea 6: No es un arreglo

-------------------------------------------------

/home/nico/tiger/tests/type/test25.tig
/* error : variable not record */
let 
	var d :=0
in
	d.f 
end

Fail: Error -- línea 6: f No es un record

-------------------------------------------------

/home/nico/tiger/tests/type/test26.tig
/* error : integer required */

3 + "var"
Fail: Error -- línea 4: Error de tipos, operando tipos distintos.

-------------------------------------------------

/home/nico/tiger/tests/type/test28.tig
/* error : different record types */

let
	type rectype1 = {name : string , id : int}
	type rectype2 = {name : string , id : int}

	var rec1 : rectype1 := rectype2 {name="Name", id=0}
in
	rec1
end
Fail: Error -- línea 8: el tipo de var es distinto a la expresion

-------------------------------------------------

/home/nico/tiger/tests/type/test29.tig
/* error : different array types */

let
	type arrtype1 = array of int
	type arrtype2 = array of int

	var arr1 : arrtype1 := arrtype2 [10] of 0
in
	arr1
end
Fail: Error -- línea 8: el tipo de var es distinto a la expresion

-------------------------------------------------

/home/nico/tiger/tests/type/test31.tig
/* error : type constraint and init value differ */
let 
	var a : int := " "
in
	a
end
Fail: Error -- línea 4: el tipo de var es distinto a la expresion

-------------------------------------------------

/home/nico/tiger/tests/type/test32.tig
/* error : initializing exp and array type differ */

let
	type arrayty = array of int

	var a := arrayty [10] of " "
in
	0
end
Fail: Error -- línea 7: Tipo de init distinto del tipo de array

-------------------------------------------------

/home/nico/tiger/tests/type/test33.tig
/* error : unknown type */
let
	var a := rectype {}
in
	0
end
Fail: Error -- línea 3: Tipo inexistente (rectype)

-------------------------------------------------

/home/nico/tiger/tests/type/test34.tig
/* error : formals and actuals have different types */
let
	function g (a : int , b : string) : int = a
in
	g ("one", "two")
end
Fail: Error -- línea 5: Error en los argumentos de la funcion (tipos)

-------------------------------------------------

/home/nico/tiger/tests/type/test35.tig
/* error : formals are more then actuals */
let
	function g (a : int , b : string) : int = a
in
	g ("one")
end
Fail: Error, distintos tamaños.
-------------------------------------------------

/home/nico/tiger/tests/type/test36.tig
/* error : formals are fewer then actuals */
let
	function g (a : int , b : string) : int = a
in
	g (3,"one",5)
end
Fail: Error, distintos tamaños.
-------------------------------------------------

/home/nico/tiger/tests/type/test38.tig
/* This is illegal, since there are two types with the same name
    in the same (consecutive) batch of mutually recursive types. 
    See also test47  */
let
	type a = int
	type a = string
in
	0
end
Fail: Error -- línea 5: Nombre 'a' duplicado

-------------------------------------------------

/home/nico/tiger/tests/type/test39.tig
/* This is illegal, since there are two functions with the same name
    in the same (consecutive) batch of mutually recursive functions.
   See also test48 */
let
	function g (a : int) : int = a
	function g (a : int) : int = a
in
	0
end
Fail: Error -- línea 6: Nombre 'g' duplicado

-------------------------------------------------

/home/nico/tiger/tests/type/test40.tig
/* error : procedure returns value */
let
	function g (a : int) = a
in 
	g (2)
end

Fail: Error -- línea 666: No se puede retornar un valor en un procedure

-------------------------------------------------

/home/nico/tiger/tests/type/test43.tig
/* error: initialize with unit and causing type mismatch in addition */

let
	var a := ()
in
	a + 3
end
Fail: Error -- línea 7: Error de tipos, operando tipos distintos.

-------------------------------------------------

/home/nico/tiger/tests/type/test45.tig
/* error : initializing nil expressions not constrained by record type */
let 
	type rectype = {name : string, id : int}

	var a := nil
in
	a
end
Fail: Error -- línea 6: No se puede asignar 'nil' en una declaración.

-------------------------------------------------

/home/nico/tiger/tests/type/test45.tig~
/* error : initializing nil expressions not constrained by record type */
let 
	type rectype = {name : string, id : int}

	var a := break
in
	a
end
Fail: Error -- línea 666: El tipo declarado y el de retorno no coinciden

-------------------------------------------------

/home/nico/tiger/tests/type/test51.tig
/* error: break out of a loop. */
if 1 then break
Fail: Error -- línea 666: El tipo declarado y el de retorno no coinciden

-------------------------------------------------

/home/nico/tiger/tests/type/test51.tig~
/* error: break out of a loop. */
/*if 1 then break*/
let
	var a := ()
in
	a + 3
Error en parsing!(7)[ ]
Fail: fin!
-------------------------------------------------

